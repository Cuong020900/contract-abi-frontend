{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSummarizationFrequency",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSummarizationFrequency",
          "type": "uint256"
        }
      ],
      "name": "BlockFrequencySummarizationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rebalancer",
          "type": "address"
        }
      ],
      "name": "RebalancerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "numerator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "denominator",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IRebalancerFactory.RebalancerFee",
          "name": "oldFee",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numeratorNew",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "denominatorNew",
          "type": "uint256"
        }
      ],
      "name": "RebalancerFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rebalancer",
          "type": "address"
        }
      ],
      "name": "RebalancerV2Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "createRebalancer",
      "outputs": [
        {
          "internalType": "address",
          "name": "rebalancer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouter",
          "type": "address"
        }
      ],
      "name": "createRebalancerV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "rebalancer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getRebalancer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getRebalancerV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parameters",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_summarizationFrequency",
          "type": "uint256"
        }
      ],
      "name": "setBlockFrequencySummarization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "setRebalanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setUniswapV3Factory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setUniswapV3Quoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summarizationFrequency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9680f64e905590f66c7aa1a5bcf6684befa1ef564aa26bbb2dd0535a39d0ce95",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "9826590",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000004000000200000000000000000000000002000080000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0fb90b63f5ba9125932785af7fb6c55cee3ce15b6d8841af518d788bba77ace8",
    "transactionHash": "0x9680f64e905590f66c7aa1a5bcf6684befa1ef564aa26bbb2dd0535a39d0ce95",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0x9680f64e905590f66c7aa1a5bcf6684befa1ef564aa26bbb2dd0535a39d0ce95",
        "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
        "topics": [
          "0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0fb90b63f5ba9125932785af7fb6c55cee3ce15b6d8841af518d788bba77ace8"
      }
    ],
    "blockNumber": 7,
    "cumulativeGasUsed": "9826590",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b6704f1a76e9a1d9c4a3afac985bb4bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSummarizationFrequency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSummarizationFrequency\",\"type\":\"uint256\"}],\"name\":\"BlockFrequencySummarizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"}],\"name\":\"RebalancerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRebalancerFactory.RebalancerFee\",\"name\":\"oldFee\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numeratorNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominatorNew\",\"type\":\"uint256\"}],\"name\":\"RebalancerFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"}],\"name\":\"RebalancerV2Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createRebalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"}],\"name\":\"createRebalancerV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getRebalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getRebalancerV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_summarizationFrequency\",\"type\":\"uint256\"}],\"name\":\"setBlockFrequencySummarization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setRebalanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setUniswapV3Factory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setUniswapV3Quoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summarizationFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rebalance/RebalancerFactory.sol\":\"RebalancerFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor (address[] memory payees, uint256[] memory shares_) payable {\\n        // solhint-disable-next-line max-line-length\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive () external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\n        uint256 payment = totalReceived * _shares[account] / _totalShares - _released[account];\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] = _released[account] + payment;\\n        _totalReleased = _totalReleased + payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0xeb056e912228afcb606668221e32a1f611141d4a5c09b9fac5109c0ee98a346d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = (type(uint256).max-denominator+1) & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x80b3bb7bc99371b388ae1fc6f2b649dd38af6f0d6daca6e85ada2146cbe992e3\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ncontract Const {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint8 public constant BASE_DECIMALS = 18;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n}\\n\",\"keccak256\":\"0xc13aebd01edd4da88ae19552f31f70dbeace7f131c0eb63fc11181086e6c19e7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Const.sol\\\";\\n\\n// Core contract; can't be changed. So disable solhint (reminder for v2)\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\ncontract Math is Const {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0xc750fd08b436e58a4e6d021eab3430cf3fad643f266d0793cdd8bec3d4c9684b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/rebalance/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IMulticall.sol\\\";\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data) external payable override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d79e04026f89afa3eaf64da9b7ea2c283d52d21039b9d82f85372033829da0b\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/NoDelegateCall.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\n/// @title Prevents delegatecall to a contract\\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\\nabstract contract NoDelegateCall {\\n    /// @dev The original address of this contract\\n    address private immutable _original;\\n\\n    constructor() {\\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n        // In other words, this variable won't change when it's checked at runtime.\\n        _original = address(this);\\n    }\\n\\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\\n    function _checkNotDelegateCall() private view {\\n        require(address(this) == _original, \\\"Do not allow DelegateCall\\\");\\n    }\\n\\n    /// @notice Prevents delegatecall into the modified method\\n    modifier noDelegateCall() {\\n        _checkNotDelegateCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x1154c474eb46191e00f7541f0b6d1cdfafc7614a656ff2cd94669fa7e13a6070\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/Rebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"./interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"./interfaces/IRebalancerDeployer.sol\\\";\\nimport \\\"./interfaces/IRebalancerFactory.sol\\\";\\nimport \\\"./interfaces/IRebalancer.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Rebalancer is IRebalancer, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IRebalancerFactory public immutable override factory;\\n    IUniswapV3Pool public immutable override pool;\\n    IERC20 public immutable override token0;\\n    IERC20 public immutable override token1;\\n\\n    IERC721 public override posNFT = IERC721(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\\n    INonfungiblePositionManager public override positionManager =\\n        INonfungiblePositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\\n    ISwapRouter public override swapRouter = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n    Totals public override feesIncome = Totals({amount0: 0, amount1: 0});\\n    Totals public override inStake = Totals({amount0: 0, amount1: 0});\\n    Position public override openPosition =\\n        Position({tokenId: 0, liquidity: 0, amount0: 0, amount1: 0, tickLower: 0, tickUpper: 0});\\n\\n    // summParams = SummarizationParams\\n    Summarize public override summParams =\\n        Summarize({\\n            lastBlock: 0,\\n            lastUser: 0,\\n            stage: 0,\\n            fixedPrice: Fraction(0, 0),\\n            toStake: Totals(0, 0),\\n            shareDenominator: 0,\\n            sellToken0: false,\\n            distributedFees: Totals(0, 0),\\n            distributedDeposits: Totals(0, 0)\\n        });\\n\\n    address[] private _users;\\n    mapping(address => bool) public override isInUsers;\\n    mapping(address => UserState) public override userStates;\\n\\n    constructor() {\\n        address factoryAddress;\\n        address poolAddress;\\n        (factoryAddress, poolAddress) = IRebalancerDeployer(msg.sender).parameters();\\n        factory = IRebalancerFactory(factoryAddress);\\n\\n        // We are not allowed to use immutable storage variables in constructor\\n        IUniswapV3Pool pool_ = IUniswapV3Pool(poolAddress);\\n        pool = pool_;\\n\\n        token0 = IERC20(pool_.token0());\\n        token1 = IERC20(pool_.token1());\\n    }\\n\\n    modifier restrictIfSummStarted() {\\n        require(summParams.stage == 0, \\\"Rebalancer: Not in stage 0\\\");\\n        _;\\n    }\\n\\n    modifier onlyFactoryOwner() {\\n        require(msg.sender == factory.owner(), \\\"Rebalancer: Only Factory Owner\\\");\\n        _;\\n    }\\n\\n    function setNFTManager(address _addr) external onlyFactoryOwner {\\n        posNFT = IERC721(_addr);\\n        positionManager = INonfungiblePositionManager(_addr);\\n    }\\n\\n    function setSwapRouter(address _addr) external onlyFactoryOwner {\\n        swapRouter = ISwapRouter(_addr);\\n    }\\n\\n    // Methods only for users\\n    function deposit(uint256 token0Amount, uint256 token1Amount) external override nonReentrant restrictIfSummStarted {\\n        require(token0Amount > 0 || token1Amount > 0, \\\"Either of token amounts must be > 0\\\");\\n        require(token0.allowance(msg.sender, address(this)) >= token0Amount, \\\"token0 allowance < token0Amount\\\");\\n        require(token1.allowance(msg.sender, address(this)) >= token1Amount, \\\"token1 allowance < token1Amount\\\");\\n\\n        if (token0Amount > 0) token0.safeTransferFrom(msg.sender, address(this), token0Amount);\\n        if (token1Amount > 0) token1.safeTransferFrom(msg.sender, address(this), token1Amount);\\n\\n        userStates[msg.sender].deposited.amount0 += token0Amount;\\n        userStates[msg.sender].deposited.amount1 += token1Amount;\\n        userStates[msg.sender].participateInStake = true;\\n\\n        emit UserDeposited(msg.sender, token0Amount, token1Amount, userStates[msg.sender]);\\n\\n        if (!isInUsers[msg.sender]) {\\n            isInUsers[msg.sender] = true;\\n            _users.push(msg.sender);\\n            emit UserCreated(msg.sender);\\n        }\\n    }\\n\\n    function withdraw(bool withdrawDeposit) external override nonReentrant restrictIfSummStarted {\\n        require(isInUsers[msg.sender], \\\"Rebalancer: no deposit yet\\\");\\n        UserState storage user = userStates[msg.sender];\\n        Totals memory transferAmount = Totals(user.fee.amount0, user.fee.amount1);\\n\\n        user.fee.amount0 = 0;\\n        user.fee.amount1 = 0;\\n\\n        if (withdrawDeposit) {\\n            transferAmount.amount0 += user.deposited.amount0;\\n            transferAmount.amount1 += user.deposited.amount1;\\n            user.deposited.amount0 = 0;\\n            user.deposited.amount1 = 0;\\n        }\\n\\n        if (transferAmount.amount0 > 0) token0.safeTransfer(msg.sender, transferAmount.amount0);\\n        if (transferAmount.amount1 > 0) token1.safeTransfer(msg.sender, transferAmount.amount1);\\n\\n        emit UserWithdrawn(msg.sender, withdrawDeposit, transferAmount, user);\\n    }\\n\\n    function participate() external override nonReentrant restrictIfSummStarted {\\n        require(isInUsers[msg.sender], \\\"Rebalancer: no deposit yet\\\");\\n        userStates[msg.sender].participateInStake = !userStates[msg.sender].participateInStake;\\n        emit UserChangedStakeParticipation(\\n            msg.sender,\\n            userStates[msg.sender].participateInStake,\\n            userStates[msg.sender]\\n        );\\n    }\\n\\n    // Methods only for factory Owner (backend)\\n    function rebalancePriceRange(\\n        int24 tickLowerCount,\\n        int24 tickUpperCount,\\n        uint256 token0Share,\\n        uint256 token1Share\\n    ) external override onlyFactoryOwner nonReentrant restrictIfSummStarted {\\n        console.log(\\\"inStake.amount0\\\", inStake.amount0);\\n        console.log(\\\"inStake.amount1\\\", inStake.amount1);\\n        require(inStake.amount0 > 0 || inStake.amount1 > 0, \\\"Rebalancer: Stake is empty\\\");\\n\\n        if (openPosition.tokenId == 0) {\\n            _openNewPosition(tickLowerCount, tickUpperCount, token0Share, token1Share);\\n        } else {\\n            _collectFees();\\n            _removeLiquidityPosition();\\n            _openNewPosition(tickLowerCount, tickUpperCount, token0Share, token1Share);\\n        }\\n        emit PriceRebalanced(tickLowerCount, tickUpperCount, token0Share, token1Share, inStake, feesIncome);\\n    }\\n\\n    // Here we also add functionality of sending unaccounted tokens to\\n    // the service owners. This helps to receive stuck funds, if ever appear.\\n    // I know, this is not good to have sideffects, but array iterating is very expensive\\n    // on Ethereum, so I decided to unite both operations here\\n    function deleteUsersWithoutFunds() external override onlyFactoryOwner nonReentrant restrictIfSummStarted {\\n        // We don't know beforehand array size, so we calculate it\\n        uint256 counter = 0;\\n\\n        require(openPosition.tokenId != 0, \\\"Rebalancer: Position must be opened\\\");\\n\\n        Totals memory realBalance = Totals({\\n            amount0: token0.balanceOf(address(this)),\\n            amount1: token1.balanceOf(address(this))\\n        });\\n\\n        Totals memory calcBalance = Totals(inStake.amount0 + feesIncome.amount0, inStake.amount1 + feesIncome.amount1);\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            calcBalance.amount0 += userStates[_users[i]].fee.amount0 + userStates[_users[i]].deposited.amount0;\\n            calcBalance.amount1 += userStates[_users[i]].fee.amount1 + userStates[_users[i]].deposited.amount1;\\n\\n            if (isUserWithoutFunds(userStates[_users[i]])) {\\n                isInUsers[_users[i]] = false;\\n            } else {\\n                counter++;\\n                isInUsers[_users[i]] = true;\\n            }\\n        }\\n\\n        require(\\n            calcBalance.amount0 == realBalance.amount0 && calcBalance.amount1 == realBalance.amount1,\\n            \\\"Rebalancer: You haven't accounted some funds movements\\\"\\n        );\\n\\n        _sendDiffToService(calcBalance, realBalance);\\n\\n        // Here we populate new array. It would be better to push() in array\\n        // but that is not allowed in Solidity\\n        address[] memory usersWithFunds = new address[](counter);\\n\\n        counter = 0;\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            if (isInUsers[_users[i]]) {\\n                usersWithFunds[counter] = _users[i];\\n                counter++;\\n            }\\n        }\\n\\n        emit UsersArrayReduced(_users.length, usersWithFunds.length);\\n        _users = usersWithFunds;\\n    }\\n\\n    // Methods for everyone\\n    function startSummarizeTrades() external override nonReentrant restrictIfSummStarted {\\n        require(\\n            block.number - summParams.lastBlock >= factory.summarizationFrequency(),\\n            \\\"Rebalancer: Wait more to start summ\\\"\\n        );\\n        summParams.stage++;\\n        _collectFees();\\n        _removeLiquidityPosition();\\n        _distributeServiceFees();\\n        emit TradeSummarizationStarted(msg.sender, summParams.stage, block.number);\\n    }\\n\\n    function summarizeUsersStates() external override nonReentrant {\\n        require(summParams.stage == 1 || summParams.stage == 2, \\\"First start summarization\\\");\\n        emit StatesSummarizing(msg.sender, summParams, block.number);\\n        if (summParams.stage == 1) {\\n            bool success = _accountFeesAndStake();\\n\\n            if (success) {\\n                summParams.stage++;\\n            }\\n        }\\n        if (summParams.stage == 2) {\\n            if (summParams.lastUser == 0) {\\n                _setConfigsForSecondStage();\\n            }\\n            bool success = _createNewStake();\\n\\n            if (success) {\\n                summParams.stage = 0;\\n                summParams.lastUser = 0;\\n                // hmm need check\\n                summParams.lastBlock = inStake.amount0 > 0 || inStake.amount1 > 0 ? block.number : 0;\\n            }\\n        }\\n    }\\n\\n    // Deposit UniswapV2 LP Token and then withdraw to this contract\\n    function migrate(MigrateParams calldata params) external override {\\n        address token0Addr = IUniswapV2Pair(params.pair).token0();\\n        address token1Addr = IUniswapV2Pair(params.pair).token1();\\n        require(token0Addr == address(token0), \\\"Rebalancer: Invalid pair\\\");\\n        require(token1Addr == address(token1), \\\"Rebalancer: Invalid pair\\\");\\n\\n        IUniswapV2Pair(params.pair).transferFrom(msg.sender, params.pair, params.liquidityToMigrate);\\n        // can than khong phan biet duoc token nao\\n        (uint256 amount0V2, uint256 amount1V2) = IUniswapV2Pair(params.pair).burn(address(this));\\n\\n        require(amount0V2 > 0 || amount1V2 > 0, \\\"Either of token amounts must be > 0\\\");\\n\\n        _deposit(address(token0), address(token1), amount0V2, amount1V2);\\n    }\\n\\n    function depositV3NFT(uint256 _tokenId) external override {\\n        uint256 tokenId = _tokenId;\\n        // transfer to this contract\\n        posNFT.transferFrom(msg.sender, address(this), tokenId);\\n\\n        (, , address token0Addr, address token1Addr, , , , uint128 liquidity, , , , ) = positionManager.positions(\\n            _tokenId\\n        );\\n\\n        require(token0Addr == address(token0), \\\"Rebalancer: Invalid pair\\\");\\n        require(token1Addr == address(token1), \\\"Rebalancer: Invalid pair\\\");\\n\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager\\n        .DecreaseLiquidityParams({\\n            tokenId: _tokenId,\\n            liquidity: liquidity,\\n            amount0Min: 0,\\n            amount1Min: 0,\\n            deadline: getDeadline()\\n        });\\n        positionManager.decreaseLiquidity(params);\\n\\n        INonfungiblePositionManager.CollectParams memory collectParams = INonfungiblePositionManager.CollectParams({\\n            tokenId: _tokenId,\\n            recipient: address(this),\\n            amount0Max: type(uint128).max,\\n            amount1Max: type(uint128).max\\n        });\\n        (uint256 amount0V3, uint256 amount1V3) = positionManager.collect(collectParams);\\n\\n        _deposit(address(token0), address(token1), amount0V3, amount1V3);\\n    }\\n\\n    // Helper view methods for everyone\\n    function users() external view override returns (address[] memory) {\\n        return _users;\\n    }\\n\\n    function getDeadline() public view override returns (uint256) {\\n        return block.timestamp + 60;\\n    }\\n\\n    function calcShare(\\n        uint256 total,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) public pure override returns (uint256) {\\n        return denominator == 0 ? 0 : FullMath.mulDiv(total, numerator, denominator);\\n    }\\n\\n    function isUserWithoutFunds(UserState memory user) public pure override returns (bool) {\\n        return\\n            user.share == 0 &&\\n            user.deposited.amount0 == 0 &&\\n            user.deposited.amount1 == 0 &&\\n            user.fee.amount1 == 0 &&\\n            user.fee.amount1 == 0;\\n    }\\n\\n    // Internal helper methods\\n    function _sendDiffToService(Totals memory calcBalance, Totals memory realBalance) private {\\n        require(\\n            realBalance.amount0 >= calcBalance.amount0 && realBalance.amount1 >= calcBalance.amount1,\\n            \\\"Rebalancer: You must never owe more tokens, than you have\\\"\\n        );\\n\\n        emit BalanceDiffSentToService(realBalance, calcBalance);\\n\\n        if (realBalance.amount0 - calcBalance.amount0 > 0)\\n            token0.safeTransfer(factory.owner(), realBalance.amount0 - calcBalance.amount0);\\n        if (realBalance.amount1 - calcBalance.amount1 > 0)\\n            token1.safeTransfer(factory.owner(), realBalance.amount1 - calcBalance.amount1);\\n    }\\n\\n    // This approach is really awfull. Not gas efficient at all.\\n    // But it works and should be optimized when deploy to production\\n    function _changeTokensRatio(uint256 token0Share, uint256 token1Share) private {\\n        require(token0Share + token1Share == 100, \\\"tokenShare sum != 100\\\");\\n\\n        // First, we make sure, that all funds located in one sided token\\n        // It should be guaranteed by the fact, that we rebalance only when\\n        // the price fall of our range. But in other cases, we still need\\n        // to do this\\n        uint256 toSell;\\n        if (inStake.amount0 > inStake.amount1) {\\n            inStake.amount0 += _swapTokens(token1, token0, inStake.amount1);\\n            inStake.amount1 = 0;\\n\\n            toSell = calcShare(inStake.amount0, token1Share, 100);\\n            inStake.amount1 += _swapTokens(token0, token1, toSell);\\n            inStake.amount0 -= toSell;\\n        } else {\\n            inStake.amount1 += _swapTokens(token0, token1, inStake.amount0);\\n            inStake.amount0 = 0;\\n\\n            toSell = calcShare(inStake.amount1, token0Share, 100);\\n            inStake.amount0 += _swapTokens(token1, token0, toSell);\\n            inStake.amount1 -= toSell;\\n        }\\n        emit TokensRationChanged(token0Share, token1Share, toSell, inStake);\\n    }\\n\\n    function _swapTokens(\\n        IERC20 sellToken,\\n        IERC20 buyToken,\\n        uint256 tokenInAmount\\n    ) private returns (uint256 tokenOutAmount) {\\n        if (tokenInAmount == 0) return 0;\\n\\n        sellToken.safeIncreaseAllowance(address(swapRouter), tokenInAmount);\\n        tokenOutAmount = swapRouter.exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: address(sellToken),\\n                tokenOut: address(buyToken),\\n                fee: pool.fee(),\\n                recipient: address(this),\\n                deadline: getDeadline(),\\n                amountIn: tokenInAmount,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        emit TokensSwapped(sellToken, buyToken, tokenInAmount, tokenOutAmount);\\n    }\\n\\n    function _openNewPosition(\\n        int24 tickLowerCount,\\n        int24 tickUpperCount,\\n        uint256 token0Share,\\n        uint256 token1Share\\n    ) private {\\n        (, int24 tick, , , , , ) = pool.slot0();\\n        int24 fullTick = tick - (tick % pool.tickSpacing());\\n\\n        // Here we get lower and upper bounds for current price\\n        int24 tickLower = fullTick - pool.tickSpacing();\\n        int24 tickUpper = fullTick + pool.tickSpacing();\\n\\n        tickLower -= tickLowerCount * pool.tickSpacing();\\n        tickUpper += tickUpperCount * pool.tickSpacing();\\n\\n        _changeTokensRatio(token0Share, token1Share);\\n\\n        token0.safeIncreaseAllowance(address(positionManager), inStake.amount0);\\n        token1.safeIncreaseAllowance(address(positionManager), inStake.amount1);\\n\\n        (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1) = positionManager.mint(\\n            INonfungiblePositionManager.MintParams({\\n                token0: pool.token0(),\\n                token1: pool.token1(),\\n                fee: pool.fee(),\\n                tickLower: tickLower,\\n                tickUpper: tickUpper,\\n                amount0Desired: inStake.amount0,\\n                amount1Desired: inStake.amount1,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                recipient: address(this),\\n                deadline: getDeadline()\\n            })\\n        );\\n\\n        inStake.amount0 -= amount0;\\n        inStake.amount1 -= amount1;\\n\\n        openPosition = Position({\\n            tokenId: tokenId,\\n            liquidity: liquidity,\\n            amount0: amount0,\\n            amount1: amount1,\\n            tickLower: tickLower,\\n            tickUpper: tickUpper\\n        });\\n        emit NewPositionOpened(openPosition, inStake);\\n    }\\n\\n    function _removeLiquidityPosition() private {\\n        if (openPosition.tokenId != 0) {\\n            posNFT.approve(address(positionManager), openPosition.tokenId);\\n\\n            (uint256 amount0L, uint256 amount1L) = positionManager.decreaseLiquidity(\\n                INonfungiblePositionManager.DecreaseLiquidityParams({\\n                    tokenId: openPosition.tokenId,\\n                    liquidity: openPosition.liquidity,\\n                    amount0Min: 0,\\n                    amount1Min: 0,\\n                    deadline: getDeadline()\\n                })\\n            );\\n\\n            uint128 MAX_INT = 2**128 - 1;\\n            (uint256 amount0C, uint256 amount1C) = positionManager.collect(\\n                INonfungiblePositionManager.CollectParams({\\n                    tokenId: openPosition.tokenId,\\n                    recipient: address(this),\\n                    amount0Max: MAX_INT,\\n                    amount1Max: MAX_INT\\n                })\\n            );\\n\\n            inStake.amount0 += (amount0C - amount0L) + amount0C;\\n            inStake.amount1 += (amount1C - amount1L) + amount1C;\\n\\n            posNFT.approve(address(positionManager), openPosition.tokenId);\\n            positionManager.burn(openPosition.tokenId);\\n\\n            openPosition = Position(0, 0, 0, 0, 0, 0);\\n            emit PositionClosed(amount0L, amount1L, inStake);\\n        }\\n    }\\n\\n    function _collectFees() private {\\n        if (openPosition.tokenId != 0) {\\n            uint128 MAX_INT = 2**128 - 1;\\n            (uint256 feeAmount0, uint256 feeAmount1) = positionManager.collect(\\n                INonfungiblePositionManager.CollectParams({\\n                    tokenId: openPosition.tokenId,\\n                    recipient: address(this),\\n                    amount0Max: MAX_INT,\\n                    amount1Max: MAX_INT\\n                })\\n            );\\n\\n            feesIncome.amount0 += feeAmount0;\\n            feesIncome.amount1 += feeAmount1;\\n\\n            emit FeesColected(feeAmount0, feeAmount1, feesIncome);\\n        }\\n    }\\n\\n    function _distributeServiceFees() private {\\n        (uint256 numerator, uint256 denominator) = factory.rebalancerFee();\\n        uint256 serviceFee0;\\n        uint256 serviceFee1;\\n\\n        serviceFee0 = calcShare(feesIncome.amount0, numerator, denominator);\\n        if (serviceFee0 != 0) {\\n            token0.safeTransfer(factory.owner(), serviceFee0);\\n            feesIncome.amount0 -= serviceFee0;\\n        }\\n\\n        serviceFee1 = calcShare(feesIncome.amount1, numerator, denominator);\\n        if (serviceFee1 != 0) {\\n            token1.safeTransfer(factory.owner(), serviceFee1);\\n            feesIncome.amount1 -= serviceFee1;\\n        }\\n        emit SereviceFeeDistributed(serviceFee0, serviceFee1, feesIncome);\\n    }\\n\\n    function _accountFeesAndStake() private returns (bool) {\\n        uint256 i = summParams.lastUser;\\n        uint256 initGas = gasleft();\\n        uint256 loopCost = 0;\\n\\n        for (i; i < _users.length; i++) {\\n            if (gasleft() < loopCost) {\\n                summParams.lastUser = i;\\n                return false;\\n            }\\n            UserState storage user = userStates[_users[i]];\\n\\n            Totals memory userFee = Totals(0, 0);\\n            Totals memory userDeposit = Totals(0, 0);\\n\\n            userFee.amount0 += calcShare(feesIncome.amount0, user.share, summParams.shareDenominator);\\n            userFee.amount1 += calcShare(feesIncome.amount1, user.share, summParams.shareDenominator);\\n\\n            userDeposit.amount0 += calcShare(inStake.amount0, user.share, summParams.shareDenominator);\\n\\n            userDeposit.amount1 += calcShare(inStake.amount1, user.share, summParams.shareDenominator);\\n\\n            user.fee.amount0 += userFee.amount0;\\n            user.fee.amount1 += userFee.amount1;\\n            user.deposited.amount0 += userDeposit.amount0;\\n            user.deposited.amount1 += userDeposit.amount1;\\n\\n            summParams.distributedFees.amount0 += userFee.amount0;\\n            summParams.distributedFees.amount1 += userFee.amount1;\\n            summParams.distributedDeposits.amount0 += userDeposit.amount0;\\n            summParams.distributedDeposits.amount1 += userDeposit.amount1;\\n\\n            user.share = 0;\\n\\n            if (user.participateInStake) {\\n                summParams.toStake.amount0 += user.deposited.amount0;\\n                summParams.toStake.amount1 += user.deposited.amount1;\\n            }\\n\\n            if (loopCost == 0) {\\n                loopCost = initGas - gasleft();\\n            }\\n        }\\n\\n        feesIncome.amount0 -= summParams.distributedFees.amount0;\\n        feesIncome.amount1 -= summParams.distributedFees.amount1;\\n        inStake.amount0 -= summParams.distributedDeposits.amount0;\\n        inStake.amount1 -= summParams.distributedDeposits.amount1;\\n\\n        // Expect very small amounts, occuring because of rounding errors\\n        Totals memory remains = Totals(feesIncome.amount0 + inStake.amount0, feesIncome.amount1 + inStake.amount1);\\n\\n        if (remains.amount0 > 0) token0.safeTransfer(factory.owner(), remains.amount0);\\n        if (remains.amount1 > 0) token1.safeTransfer(factory.owner(), remains.amount1);\\n\\n        feesIncome.amount0 = 0;\\n        feesIncome.amount1 = 0;\\n\\n        inStake.amount0 = summParams.toStake.amount0;\\n        inStake.amount1 = summParams.toStake.amount1;\\n\\n        summParams.toStake.amount0 = 0;\\n        summParams.toStake.amount1 = 0;\\n\\n        emit DoneAccountingFeesAndStake(loopCost, inStake, summParams);\\n\\n        summParams.distributedFees.amount0 = 0;\\n        summParams.distributedFees.amount1 = 0;\\n        summParams.distributedDeposits.amount0 = 0;\\n        summParams.distributedDeposits.amount1 = 0;\\n\\n        return true;\\n    }\\n\\n    function _createNewStake() private returns (bool) {\\n        uint256 i = summParams.lastUser;\\n        uint256 initGas = gasleft();\\n        uint256 loopCost = 0;\\n\\n        for (i; i < _users.length; i++) {\\n            if (gasleft() < loopCost) {\\n                summParams.lastUser = i;\\n                return false;\\n            }\\n\\n            UserState storage user = userStates[_users[i]];\\n            if (user.participateInStake) {\\n                uint256 converted = summParams.sellToken0\\n                    ? calcShare(\\n                        user.deposited.amount0,\\n                        summParams.fixedPrice.numerator,\\n                        summParams.fixedPrice.denominator\\n                    )\\n                    : calcShare(\\n                        user.deposited.amount1,\\n                        summParams.fixedPrice.numerator,\\n                        summParams.fixedPrice.denominator\\n                    );\\n\\n                user.share = summParams.sellToken0\\n                    ? user.deposited.amount1 + converted\\n                    : user.deposited.amount0 + converted;\\n\\n                user.deposited.amount0 = 0;\\n                user.deposited.amount1 = 0;\\n            }\\n\\n            if (loopCost == 0) {\\n                loopCost = initGas - gasleft();\\n            }\\n        }\\n        emit DoneCreatingNewStakes(loopCost, inStake, summParams);\\n        return true;\\n    }\\n\\n    // Here we:\\n    // 1. Swap all tokens into one asset.\\n    // 2. Calculate exchange price and set it into fixedPrice\\n    // 3. Set sellToken0 property\\n    // 4. Set shareDenominator property\\n    function _setConfigsForSecondStage() private {\\n        uint256 initAmount0 = inStake.amount0;\\n        uint256 initAmount1 = inStake.amount1;\\n\\n        // We swap all tokens into one asset and do it to the side of\\n        // smaller amount in order to counter-balance price movement\\n        if (inStake.amount0 > inStake.amount1) {\\n            summParams.sellToken0 = true;\\n            if (inStake.amount0 > 0) {\\n                _changeTokensRatio(0, 100);\\n            }\\n\\n            if (initAmount0 > 0) {\\n                summParams.fixedPrice = Fraction(inStake.amount1 - initAmount1, initAmount0);\\n                summParams.shareDenominator = inStake.amount1;\\n            }\\n        } else {\\n            summParams.sellToken0 = false;\\n            if (inStake.amount1 > 0) {\\n                _changeTokensRatio(100, 0);\\n            }\\n            if (initAmount1 > 0) {\\n                summParams.fixedPrice = Fraction(inStake.amount0 - initAmount0, initAmount1);\\n                summParams.shareDenominator = inStake.amount0;\\n            }\\n        }\\n        emit SettedSummarizationConfigs(summParams);\\n    }\\n\\n    function _deposit(\\n        address _token0,\\n        address _token1,\\n        uint256 _amount0,\\n        uint256 _amount1\\n    ) internal {\\n        // Really need approve?\\n        TransferHelper.safeApprove(_token0, address(positionManager), _amount0);\\n        TransferHelper.safeApprove(_token1, address(positionManager), _amount1);\\n\\n        userStates[msg.sender].deposited.amount0 += _amount0;\\n        userStates[msg.sender].deposited.amount1 += _amount1;\\n        userStates[msg.sender].participateInStake = true;\\n\\n        emit UserDeposited(msg.sender, _amount0, _amount1, userStates[msg.sender]);\\n\\n        if (!isInUsers[msg.sender]) {\\n            isInUsers[msg.sender] = true;\\n            _users.push(msg.sender);\\n            emit UserCreated(msg.sender);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x493ba2c4d7ba99f8aa3e09d34d25d4ae6bc25ec944d5d4993f902cd3b5c045f1\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/RebalancerDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"./interfaces/IRebalancerDeployer.sol\\\";\\nimport \\\"./Rebalancer.sol\\\";\\nimport \\\"./RebalancerV2.sol\\\";\\n\\ncontract RebalancerDeployer is IRebalancerDeployer {\\n    struct Parameters {\\n        address factory;\\n        address pool;\\n    }\\n\\n    Parameters public override parameters;\\n\\n    function _deploy(address factory, address pool) internal returns (address rebalancer) {\\n        parameters = Parameters({factory: factory, pool: pool});\\n        rebalancer = address(new Rebalancer{salt: keccak256(abi.encode(pool))}());\\n        delete parameters;\\n    }\\n\\n    function _deployV2(\\n        address factory,\\n        address pool,\\n        uint24 fee,\\n        address token0,\\n        address token1,\\n        address nft,\\n        address swapRouter\\n    ) internal returns (address rebalancer) {\\n        parameters = Parameters({factory: factory, pool: pool});\\n        rebalancer = address(new RebalancerV2{salt: keccak256(abi.encode(pool))}(fee, token0, token1, nft, swapRouter));\\n        delete parameters;\\n    }\\n}\\n\",\"keccak256\":\"0xb25377960dc23ca2e06b215dedb4c6121f2f1420733c6fa619f656b91662e0e3\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/RebalancerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"./interfaces/IRebalancerFactory.sol\\\";\\nimport \\\"./interfaces/IRebalancer.sol\\\";\\nimport \\\"./RebalancerDeployer.sol\\\";\\nimport \\\"./NoDelegateCall.sol\\\";\\n\\ncontract RebalancerFactory is IRebalancerFactory, RebalancerDeployer, NoDelegateCall {\\n    IUniswapV3Factory public override uniswapV3Factory = IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\\n\\n    RebalancerFee public override rebalancerFee = RebalancerFee(0, 0);\\n    mapping(address => address) public override getRebalancer;\\n    mapping(address => address) public getRebalancerV2;\\n    address public override quoter;\\n\\n    // Once in every 24 hours\\n    uint256 public override summarizationFrequency = 5760;\\n\\n    address public override owner;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"RFactory: Only owner\\\");\\n        _;\\n    }\\n\\n    function setOwner(address _owner) external override onlyOwner {\\n        emit OwnerChanged(owner, _owner);\\n        owner = _owner;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnerChanged(address(0), msg.sender);\\n    }\\n\\n    function setUniswapV3Factory(address _addr) external onlyOwner {\\n        uniswapV3Factory = IUniswapV3Factory(_addr);\\n    }\\n\\n    function setUniswapV3Quoter(address _addr) external onlyOwner {\\n        quoter = _addr;\\n    }\\n\\n    function setBlockFrequencySummarization(uint256 _summarizationFrequency) external override onlyOwner {\\n        emit BlockFrequencySummarizationChanged(summarizationFrequency, _summarizationFrequency);\\n\\n        // Even owner can not set more than ~48 hours and less than ~1 hour.\\n        // This measure prevents misbehavior from owners side\\n        require(_summarizationFrequency < 11601, \\\"RFactory: need less than 11601\\\");\\n        summarizationFrequency = _summarizationFrequency;\\n    }\\n\\n    function setRebalanceFee(uint256 numerator, uint256 denominator) external override onlyOwner {\\n        require(numerator < denominator, \\\"RFactory: Require Numera < denomina\\\");\\n        emit RebalancerFeeChanged(rebalancerFee, numerator, denominator);\\n        rebalancerFee.numerator = numerator;\\n        rebalancerFee.denominator = denominator;\\n    }\\n\\n    function createRebalancer(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external override onlyOwner noDelegateCall returns (address rebalancer) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(uniswapV3Factory.getPool(tokenA, tokenB, fee));\\n        require(address(pool) != address(0), \\\"RFactory: pool doesn't exist\\\");\\n        require(getRebalancer[address(pool)] == address(0), \\\"RFactory: RB has existed\\\");\\n\\n        rebalancer = _deploy(address(this), address(pool));\\n\\n        getRebalancer[address(pool)] = address(rebalancer);\\n\\n        emit RebalancerCreated(tokenA, tokenB, fee, address(pool), address(rebalancer));\\n    }\\n\\n    function createRebalancerV2(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee,\\n        address nft,\\n        address swapRouter\\n    ) external override onlyOwner noDelegateCall returns (address rebalancer) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(uniswapV3Factory.getPool(tokenA, tokenB, fee));\\n        require(address(pool) != address(0), \\\"RFactory: pool doesn't exist\\\");\\n        require(getRebalancerV2[address(pool)] == address(0), \\\"RFactory: RB has existed\\\");\\n\\n        rebalancer = _deployV2(address(this), address(pool), fee, tokenA, tokenB, nft, swapRouter);\\n\\n        getRebalancerV2[address(pool)] = address(rebalancer);\\n\\n        emit RebalancerV2Created(tokenA, tokenB, fee, address(pool), address(rebalancer));\\n    }\\n}\\n\",\"keccak256\":\"0xcab20b3d8a65a2b09d1a3e2b7573e79528331acff529ebdca9d55eba6700eeaf\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/RebalancerV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"./interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"./interfaces/IRebalancerDeployer.sol\\\";\\nimport \\\"./interfaces/IRebalancerFactory.sol\\\";\\nimport \\\"../libs/Math.sol\\\";\\nimport \\\"./Multicall.sol\\\";\\n\\nstruct Position {\\n    uint256 tokenId;\\n    uint128 liquidity;\\n    uint256 amount0;\\n    uint256 amount1;\\n    int24 tickLower;\\n    int24 tickUpper;\\n}\\n\\nstruct MigrateParams {\\n    address pair; // the Uniswap v2-compatible pair\\n    uint256 liquidityToMigrate; // expected to be balanceOf(msg.sender)\\n}\\n\\ncontract RebalancerV2 is ERC20, ReentrancyGuard, Multicall, Math {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token0;\\n    IERC20 public token1;\\n    uint256 public totalAmount0;\\n    uint256 public totalAmount1;\\n    uint24 public fee;\\n\\n    IRebalancerFactory public immutable factory;\\n    IUniswapV3Pool public uniswapV3Pool;\\n    Stage public stage;\\n    IERC721 public posNFT;\\n    INonfungiblePositionManager public positionManager;\\n    ISwapRouter public swapRouter;\\n    Position public openPosition =\\n        Position({tokenId: 0, liquidity: 0, amount0: 0, amount1: 0, tickLower: 0, tickUpper: 0});\\n\\n    enum Stage {\\n        HOLDING,\\n        DEPOSITED\\n    }\\n\\n    constructor(\\n        uint24 _fee,\\n        address _token0,\\n        address _token1,\\n        address _nft,\\n        address _swapRouter\\n    ) ERC20(\\\"Rebalancer LP Token\\\", \\\"RLP\\\") {\\n        address factoryAddress;\\n        address poolAddress;\\n        (factoryAddress, poolAddress) = IRebalancerDeployer(msg.sender).parameters();\\n        factory = IRebalancerFactory(factoryAddress);\\n        uniswapV3Pool = IUniswapV3Pool(poolAddress);\\n\\n        fee = _fee;\\n        token0 = IERC20(_token0);\\n        token1 = IERC20(_token1);\\n        totalAmount0 = 0;\\n        totalAmount1 = 0;\\n        stage = Stage.HOLDING;\\n\\n        posNFT = IERC721(_nft);\\n        positionManager = INonfungiblePositionManager(_nft);\\n        swapRouter = ISwapRouter(_swapRouter);\\n    }\\n\\n    modifier onlyFactoryOwner() {\\n        require(msg.sender == factory.owner(), \\\"Rebalancer: Only Factory Owner\\\");\\n        _;\\n    }\\n\\n    modifier holding() {\\n        require(stage == Stage.HOLDING, \\\"Rebalancer: Not in stage HOLDING\\\");\\n        _;\\n    }\\n\\n    modifier deposited() {\\n        require(stage == Stage.DEPOSITED, \\\"Rebalancer: Not in stage DEPOSITED\\\");\\n        _;\\n    }\\n\\n    // only owner\\n    function approveNFT() public onlyFactoryOwner {\\n        token0.approve(address(positionManager), type(uint256).max);\\n        token1.approve(address(positionManager), type(uint256).max);\\n    }\\n\\n    function approveSwapRouter() public onlyFactoryOwner {\\n        token0.approve(address(swapRouter), type(uint256).max);\\n        token1.approve(address(swapRouter), type(uint256).max);\\n    }\\n\\n    function setNFTManager(address _addr) external onlyFactoryOwner {\\n        posNFT = IERC721(_addr);\\n        positionManager = INonfungiblePositionManager(_addr);\\n        approveNFT();\\n    }\\n\\n    function setSwapRouter(address _addr) external onlyFactoryOwner {\\n        swapRouter = ISwapRouter(_addr);\\n        approveSwapRouter();\\n    }\\n\\n    // co the sua thanh van add liquidity khi dang o stage DEPOSITED, nhung se add them liquidity cho univ3\\n    function deposit(\\n        address _recipient,\\n        uint256 _token0Amount,\\n        uint256 _token1Amount\\n    ) external nonReentrant holding returns (uint256 liquidity) {\\n        require(_token0Amount > 0 || _token1Amount > 0, \\\"Rebalancer: Either of token amounts must be > 0\\\");\\n        require(\\n            token0.allowance(msg.sender, address(this)) >= _token0Amount,\\n            \\\"Rebalancer: token0 allowance < token0Amount\\\"\\n        );\\n        require(\\n            token1.allowance(msg.sender, address(this)) >= _token1Amount,\\n            \\\"Rebalancer: token1 allowance < token1Amount\\\"\\n        );\\n\\n        if (_token0Amount > 0) token0.safeTransferFrom(msg.sender, address(this), _token0Amount);\\n        if (_token1Amount > 0) token1.safeTransferFrom(msg.sender, address(this), _token1Amount);\\n        totalAmount0 = badd(totalAmount0, _token0Amount);\\n        totalAmount1 = badd(totalAmount1, _token1Amount);\\n\\n        // mint rlp token, transfer to user\\n        liquidity = _calRLP(\\n            address(token0),\\n            address(token1),\\n            _token0Amount,\\n            _token1Amount,\\n            totalAmount0,\\n            totalAmount1,\\n            fee,\\n            totalSupply()\\n        );\\n        _mint(_recipient, liquidity);\\n    }\\n\\n    function withdraw(address _recipient, uint256 _liquidity)\\n        external\\n        nonReentrant\\n        holding\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        amount0 = bdiv(bmul(_liquidity, totalAmount0), totalSupply());\\n        amount1 = bdiv(bmul(_liquidity, totalAmount1), totalSupply());\\n\\n        totalAmount0 = bsub(totalAmount0, amount0);\\n        totalAmount1 = bsub(totalAmount1, amount1);\\n\\n        _burn(msg.sender, _liquidity);\\n\\n        token0.safeTransfer(_recipient, amount0);\\n        token1.safeTransfer(_recipient, amount1);\\n    }\\n\\n    // Deposit UniswapV2 LP Token and then withdraw to this contract\\n    function depositV2LP(MigrateParams calldata params, address _recipient)\\n        external\\n        holding\\n        returns (uint256 liquidity)\\n    {\\n        address token0Addr = IUniswapV2Pair(params.pair).token0();\\n        address token1Addr = IUniswapV2Pair(params.pair).token1();\\n        require(token0Addr == address(token0), \\\"Rebalancer: Invalid pair\\\");\\n        require(token1Addr == address(token1), \\\"Rebalancer: Invalid pair\\\");\\n        IUniswapV2Pair(params.pair).transferFrom(msg.sender, params.pair, params.liquidityToMigrate);\\n        // can than khong phan biet duoc token nao\\n        (uint256 amount0V2, uint256 amount1V2) = IUniswapV2Pair(params.pair).burn(address(this));\\n        require(amount0V2 > 0 || amount1V2 > 0, \\\"Rebalancer: Either of token amounts must be > 0\\\");\\n\\n        totalAmount0 = badd(totalAmount0, amount0V2);\\n        totalAmount1 = badd(totalAmount1, amount1V2);\\n        // mint rlp token, transfer to user\\n        liquidity = _calRLP(\\n            address(token0),\\n            address(token1),\\n            amount0V2,\\n            amount1V2,\\n            totalAmount0,\\n            totalAmount1,\\n            fee,\\n            totalSupply()\\n        );\\n        _mint(_recipient, liquidity);\\n    }\\n\\n    function depositV3NFT(uint256 _tokenId, address _recipient) external holding returns (uint256 liquidity) {\\n        uint256 tokenId = _tokenId;\\n\\n        (, , address token0Addr, address token1Addr, , , , uint128 liquidityV3, , , , ) = positionManager.positions(\\n            _tokenId\\n        );\\n\\n        require(token0Addr == address(token0), \\\"Rebalancer: Invalid pair\\\");\\n        require(token1Addr == address(token1), \\\"Rebalancer: Invalid pair\\\");\\n\\n        // transfer to this contract\\n        posNFT.transferFrom(msg.sender, address(this), tokenId);\\n\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager\\n        .DecreaseLiquidityParams({\\n            tokenId: _tokenId,\\n            liquidity: liquidityV3,\\n            amount0Min: 0,\\n            amount1Min: 0,\\n            deadline: _getDeadline()\\n        });\\n        positionManager.decreaseLiquidity(params);\\n\\n        INonfungiblePositionManager.CollectParams memory collectParams = INonfungiblePositionManager.CollectParams({\\n            tokenId: _tokenId,\\n            recipient: address(this),\\n            amount0Max: type(uint128).max,\\n            amount1Max: type(uint128).max\\n        });\\n        (uint256 amount0V3, uint256 amount1V3) = positionManager.collect(collectParams);\\n\\n        totalAmount0 = badd(totalAmount0, amount0V3);\\n        totalAmount1 = badd(totalAmount1, amount1V3);\\n        // mint rlp token, transfer to user\\n        liquidity = _calRLP(\\n            address(token0),\\n            address(token1),\\n            amount0V3,\\n            amount1V3,\\n            totalAmount0,\\n            totalAmount1,\\n            fee,\\n            totalSupply()\\n        );\\n        _mint(_recipient, liquidity);\\n    }\\n\\n    // only owner, stage holding\\n    function rebalance(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 token0Share,\\n        uint256 token1Share\\n    ) external onlyFactoryOwner holding {\\n        require(totalAmount0 > 0 || totalAmount1 > 0, \\\"Rebalancer: Not enough amount to rebalance\\\");\\n        _openNewPosition(tickLower, tickUpper, token0Share, token1Share);\\n        stage = Stage.DEPOSITED;\\n    }\\n\\n    function stopRebalance() external onlyFactoryOwner deposited {\\n        _removeLiquidityPosition(openPosition.tokenId, openPosition.liquidity, _getDeadline());\\n        openPosition = Position({tokenId: 0, liquidity: 0, amount0: 0, amount1: 0, tickLower: 0, tickUpper: 0});\\n        stage = Stage.HOLDING;\\n    }\\n\\n    function _openNewPosition(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 token0Share,\\n        uint256 token1Share\\n    ) private {\\n        _changeTokensRatio(token0Share, token1Share);\\n        (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1) = positionManager.mint(\\n            INonfungiblePositionManager.MintParams({\\n                token0: address(token0),\\n                token1: address(token1),\\n                fee: fee,\\n                tickLower: tickLower,\\n                tickUpper: tickUpper,\\n                amount0Desired: totalAmount0,\\n                amount1Desired: totalAmount1,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                recipient: address(this),\\n                deadline: _getDeadline()\\n            })\\n        );\\n\\n        totalAmount0 -= amount0;\\n        totalAmount1 -= amount1;\\n\\n        openPosition = Position({\\n            tokenId: tokenId,\\n            liquidity: liquidity,\\n            amount0: amount0,\\n            amount1: amount1,\\n            tickLower: tickLower,\\n            tickUpper: tickUpper\\n        });\\n    }\\n\\n    function _getDeadline() internal view returns (uint256) {\\n        return block.timestamp + 1800;\\n    }\\n\\n    function _removeLiquidityPosition(\\n        uint256 _tokenId,\\n        uint128 _liquidity,\\n        uint256 _deadline\\n    ) internal deposited {\\n        uint256 deadline = _deadline;\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager\\n        .DecreaseLiquidityParams({\\n            tokenId: _tokenId,\\n            liquidity: _liquidity,\\n            amount0Min: 0,\\n            amount1Min: 0,\\n            deadline: deadline\\n        });\\n        positionManager.decreaseLiquidity(params);\\n\\n        INonfungiblePositionManager.CollectParams memory collectParams = INonfungiblePositionManager.CollectParams({\\n            tokenId: _tokenId,\\n            recipient: address(this),\\n            amount0Max: type(uint128).max,\\n            amount1Max: type(uint128).max\\n        });\\n        (uint256 amount0, uint256 amount1) = positionManager.collect(collectParams);\\n\\n        totalAmount0 += amount0;\\n        totalAmount1 += amount1;\\n    }\\n\\n    function _calRLP(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Amount,\\n        uint256 _token1Amount,\\n        uint256 _totalAmount0,\\n        uint256 _totalAmount1,\\n        uint24 _fee,\\n        uint256 _totalLiquidity\\n    ) private returns (uint256) {\\n        IQuoter quoter = IQuoter(factory.quoter());\\n\\n        // exchange token 0 => token 1\\n        uint256 totalAmount1Converted = quoter.quoteExactInputSingle(_token1, _token0, _fee, _totalAmount1, 0);\\n        uint256 token1AmountConverted = quoter.quoteExactInputSingle(_token1, _token0, _fee, _token1Amount, 0);\\n        uint256 tempTotalAmount0 = badd(_totalAmount0, totalAmount1Converted);\\n        uint256 tempToken0Amount = badd(_token0Amount, token1AmountConverted);\\n\\n        if (_totalLiquidity == 0) {\\n            return tempToken0Amount;\\n        }\\n\\n        return bdiv(bmul(_totalLiquidity, tempToken0Amount), tempTotalAmount0);\\n    }\\n\\n    // This approach is really awfull. Not gas efficient at all.\\n    // But it works and should be optimized when deploy to production\\n    function _changeTokensRatio(uint256 _token0Share, uint256 _token1Share) private {\\n        require(_token0Share + _token1Share == 100, \\\"Rebalancer: tokenShare sum != 100\\\");\\n\\n        // First, we make sure, that all funds located in one sided token\\n        // It should be guaranteed by the fact, that we rebalance only when\\n        // the price fall of our range. But in other cases, we still need\\n        // to do this\\n        uint256 toSell;\\n        if (totalAmount0 > totalAmount1) {\\n            totalAmount0 = badd(totalAmount0, _swapTokens(token1, token0, totalAmount1));\\n            totalAmount1 = 0;\\n\\n            toSell = _calcShare(totalAmount0, _token1Share, 100);\\n            totalAmount1 = badd(totalAmount1, _swapTokens(token0, token1, toSell));\\n            totalAmount0 = bsub(totalAmount0, toSell);\\n        } else {\\n            totalAmount1 = badd(totalAmount1, _swapTokens(token0, token1, totalAmount0));\\n            totalAmount0 = 0;\\n\\n            toSell = _calcShare(totalAmount1, _token0Share, 100);\\n            totalAmount0 = badd(totalAmount0, _swapTokens(token1, token0, toSell));\\n\\n            totalAmount1 = bsub(totalAmount1, toSell);\\n        }\\n    }\\n\\n    function _calcShare(\\n        uint256 total,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) private pure returns (uint256) {\\n        return denominator == 0 ? 0 : FullMath.mulDiv(total, numerator, denominator);\\n    }\\n\\n    function _swapTokens(\\n        IERC20 _sellToken,\\n        IERC20 _buyToken,\\n        uint256 _tokenInAmount\\n    ) private returns (uint256 _tokenOutAmount) {\\n        if (_tokenInAmount == 0) return 0;\\n        _tokenOutAmount = swapRouter.exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: address(_sellToken),\\n                tokenOut: address(_buyToken),\\n                fee: fee,\\n                recipient: address(this),\\n                deadline: _getDeadline(),\\n                amountIn: _tokenInAmount,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa8e42aea434f278264408e0b7c6c20e7e8c6056c14e9aff02145f1c7ed5f2710\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/interfaces/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x9fd3bb6c8408854dc29e44d4c6b6d9acbdddb6d95e0ae9b373cab768c6b8e26c\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xb8d736086e19ef0ee2b8949201919cf35cf5f30ccf276be64176b62a0915859f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/rebalance/interfaces/IRebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"./INonfungiblePositionManager.sol\\\";\\nimport \\\"./IRebalancerFactory.sol\\\";\\n\\ninterface IRebalancer {\\n    struct Position {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0;\\n        uint256 amount1;\\n        int24 tickLower;\\n        int24 tickUpper;\\n    }\\n\\n    struct Totals {\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    struct Fraction {\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    struct UserState {\\n        Totals fee;\\n        Totals deposited;\\n        uint256 share;\\n        bool participateInStake;\\n    }\\n\\n    struct Summarize {\\n        uint256 lastBlock;\\n        uint256 lastUser;\\n        int64 stage;\\n        Fraction fixedPrice;\\n        Totals toStake;\\n        uint256 shareDenominator;\\n        bool sellToken0;\\n        Totals distributedFees;\\n        Totals distributedDeposits;\\n    }\\n\\n    struct MigrateParams {\\n        address pair; // the Uniswap v2-compatible pair\\n        uint256 liquidityToMigrate; // expected to be balanceOf(msg.sender)\\n    }\\n\\n    event UserDeposited(address sender, uint256 deposit0Amount, uint256 deposit1Amount, UserState userState);\\n    event UserCreated(address sender);\\n    event UserWithdrawn(address sender, bool isWithdrawingDeposit, Totals withdrawn, UserState userState);\\n    event UserChangedStakeParticipation(address sender, bool newState, UserState user);\\n    event PriceRebalanced(\\n        int24 tickLowerCount,\\n        int24 tickUpperCount,\\n        uint256 token0Share,\\n        uint256 token1Share,\\n        Totals inStake,\\n        Totals feesIncome\\n    );\\n\\n    event UsersArrayReduced(uint256 oldUsersCount, uint256 newUsersCount);\\n    event TradeSummarizationStarted(address sender, int64 status, uint256 startBlock);\\n    event StatesSummarizing(address sender, Summarize summParams, uint256 blockNumber);\\n    event BalanceDiffSentToService(Totals realBalance, Totals calcBalance);\\n    event TokensRationChanged(uint256 token0Share, uint256 token1Share, uint256 toSell, Totals inStake);\\n    event TokensSwapped(IERC20 sellToken, IERC20 buyToken, uint256 tokenIn, uint256 tokenOut);\\n    event NewPositionOpened(Position openPosition, Totals inStake);\\n    event PositionClosed(uint256 receivedAmount0, uint256 receivedAmount1, Totals inStake);\\n    event FeesColected(uint256 receivedAmount0, uint256 receivedAmount1, Totals feesIncome);\\n    event SereviceFeeDistributed(uint256 serviceFee0, uint256 serviceFee1, Totals feesIncome);\\n    event DoneAccountingFeesAndStake(uint256 loopCost, Totals inStake, Summarize summParams);\\n    event DoneCreatingNewStakes(uint256 loopCost, Totals inStake, Summarize summParams);\\n    event SettedSummarizationConfigs(Summarize summParams);\\n\\n    // Properties\\n    function factory() external view returns (IRebalancerFactory);\\n\\n    function pool() external view returns (IUniswapV3Pool);\\n\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function posNFT() external view returns (IERC721);\\n\\n    function positionManager() external view returns (INonfungiblePositionManager);\\n\\n    function swapRouter() external view returns (ISwapRouter);\\n\\n    function feesIncome() external view returns (uint256 amount0, uint256 amount1);\\n\\n    function inStake() external view returns (uint256 amount0, uint256 amount1);\\n\\n    function openPosition()\\n        external\\n        view\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1,\\n            int24 tickLower,\\n            int24 tickUpper\\n        );\\n\\n    function summParams()\\n        external\\n        view\\n        returns (\\n            uint256 lastBlock,\\n            uint256 lastUser,\\n            int64 stage,\\n            Fraction memory fixedPrice,\\n            Totals memory toStake,\\n            uint256 shareDenominator,\\n            bool sellToken0,\\n            Totals memory distributedFees,\\n            Totals memory distributedDeposits\\n        );\\n\\n    function users() external view returns (address[] memory);\\n\\n    function isInUsers(address) external view returns (bool);\\n\\n    function userStates(address)\\n        external\\n        view\\n        returns (\\n            Totals memory fee,\\n            Totals memory deposited,\\n            uint256 share,\\n            bool participateInStake\\n        );\\n\\n    // Methods\\n    function deposit(uint256 token0Amount, uint256 token1Amount) external;\\n\\n    function migrate(MigrateParams calldata params) external;\\n\\n    function depositV3NFT(uint256 _tokenId) external;\\n\\n    function withdraw(bool withdrawDeposit) external;\\n\\n    function participate() external;\\n\\n    function rebalancePriceRange(\\n        int24 tickLowerCount,\\n        int24 tickUpperCount,\\n        uint256 token0Share,\\n        uint256 token1Share\\n    ) external;\\n\\n    function deleteUsersWithoutFunds() external;\\n\\n    function startSummarizeTrades() external;\\n\\n    function summarizeUsersStates() external;\\n\\n    function getDeadline() external view returns (uint256);\\n\\n    function calcShare(\\n        uint256 total,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) external pure returns (uint256);\\n\\n    function isUserWithoutFunds(UserState memory user) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x93103d75d41da6471a39d2410ffd271b3e89265dfa8e8666bd325a612429be9a\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/interfaces/IRebalancerDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\ninterface IRebalancerDeployer {\\n    function parameters() external view returns (address factory, address pool);\\n}\\n\",\"keccak256\":\"0x2b75882d431aa4ddeb7a1c90250ccabd29d996921c6001fb77749cebeac1af92\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/interfaces/IRebalancerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\n\\ninterface IRebalancerFactory {\\n    struct RebalancerFee {\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n    event RebalancerCreated(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint24 indexed fee,\\n        address pool,\\n        address rebalancer\\n    );\\n\\n    event RebalancerV2Created(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        uint24 indexed fee,\\n        address pool,\\n        address rebalancer\\n    );\\n\\n    event RebalancerFeeChanged(RebalancerFee oldFee, uint256 numeratorNew, uint256 denominatorNew);\\n    event BlockFrequencySummarizationChanged(uint256 oldSummarizationFrequency, uint256 newSummarizationFrequency);\\n\\n    function uniswapV3Factory() external view returns (IUniswapV3Factory);\\n\\n    function owner() external view returns (address);\\n\\n    function quoter() external view returns (address);\\n\\n    function summarizationFrequency() external view returns (uint256);\\n\\n    function rebalancerFee() external view returns (uint256 numerator, uint256 denominator);\\n\\n    function getRebalancer(address pool) external view returns (address rebalancer);\\n\\n    function setOwner(address _owner) external;\\n\\n    function setRebalanceFee(uint256 numerator, uint256 denominator) external;\\n\\n    function setBlockFrequencySummarization(uint256 _summarizationFrequency) external;\\n\\n    function createRebalancer(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address rebalancer);\\n\\n    function createRebalancerV2(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee,\\n        address nft,\\n        address swapRouter\\n    ) external returns (address rebalancer);\\n}\\n\",\"keccak256\":\"0x89c9a6e512094f3900fda11fdbaa66ec4ea24ddfa0804465d8a4b718e69cfe33\",\"license\":\"BUSL-1.1\"},\"contracts/rebalance/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x75fb70383bf9bcbcc7cf7274b7ae764619edced8fdb3c4cda2080708497466d6\",\"license\":\"GPL-2.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600280546001600160a01b031916731f98431c8ad98523631ae4a59f267346ea31f98417905560e0604052600060a081905260c0819052600381905560045561168060085534801561005057600080fd5b503060601b608052600980546001600160a01b031916339081179091556040516000907fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c908290a360805160601c61afe96100b660003960006109f1015261afe96000f3fe60806040523480156200001157600080fd5b5060043610620001095760003560e01c80638903573011620000a3578063cec5926c116200006e578063cec5926c146200025b578063d19d40bd1462000274578063e2cfcfee1462000299578063f7960e4014620002b057600080fd5b80638903573014620001e05780638da5cb5b146200021c5780639776bc961462000230578063c6bbd5a7146200024757600080fd5b8063401e388311620000e4578063401e388314620001555780634b3484aa14620001895780635b54918214620001a05780636463e94c14620001b457600080fd5b80630f944b22146200010e57806313af40351462000127578063219248ab146200013e575b600080fd5b620001256200011f36600462000d49565b620002dc565b005b620001256200013836600462000c3a565b620003a6565b620001256200014f36600462000c3a565b6200042f565b6200016c6200016636600462000ccf565b6200047e565b6040516001600160a01b0390911681526020015b60405180910390f35b620001256200019a36600462000d63565b6200069e565b6002546200016c906001600160a01b031681565b6200016c620001c536600462000c3a565b6005602052600090815260409020546001600160a01b031681565b600054600154620001fb916001600160a01b03908116911682565b604080516001600160a01b0393841681529290911660208301520162000180565b6009546200016c906001600160a01b031681565b6200016c6200024136600462000c81565b6200077e565b6007546200016c906001600160a01b031681565b6200026560085481565b60405190815260200162000180565b60035460045462000283919082565b6040805192835260208301919091520162000180565b62000125620002aa36600462000c3a565b62000997565b6200016c620002c136600462000c3a565b6006602052600090815260409020546001600160a01b031681565b6009546001600160a01b03163314620003125760405162461bcd60e51b8152600401620003099062000d86565b60405180910390fd5b60085460408051918252602082018390527f92712b205503d05acd90de7b50dedf0600198f6231af17fb8dfee6ad74236a27910160405180910390a1612d518110620003a15760405162461bcd60e51b815260206004820152601e60248201527f52466163746f72793a206e656564206c657373207468616e2031313630310000604482015260640162000309565b600855565b6009546001600160a01b03163314620003d35760405162461bcd60e51b8152600401620003099062000d86565b6009546040516001600160a01b038084169216907fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c90600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031633146200045c5760405162461bcd60e51b8152600401620003099062000d86565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6009546000906001600160a01b03163314620004ae5760405162461bcd60e51b8152600401620003099062000d86565b620004b8620009e6565b600254604051630b4c774160e11b81526001600160a01b038881166004830152878116602483015262ffffff871660448301526000921690631698ee829060640160206040518083038186803b1580156200051257600080fd5b505afa15801562000527573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200054d919062000c61565b90506001600160a01b038116620005a75760405162461bcd60e51b815260206004820152601c60248201527f52466163746f72793a20706f6f6c20646f65736e277420657869737400000000604482015260640162000309565b6001600160a01b0381811660009081526006602052604090205416156200060c5760405162461bcd60e51b815260206004820152601860248201527714919858dd1bdc9e4e881490881a185cc8195e1a5cdd195960421b604482015260640162000309565b6200061d3082878a8a898962000a62565b6001600160a01b0382811660008181526006602090815260409182902080546001600160a01b03191686861690811790915582519384529083015292945062ffffff881692898316928b16917f6c15140167e1d05aa492ca7e0125d8dc1755fb743e5202b6c5fefc2b25aad831910160405180910390a45095945050505050565b6009546001600160a01b03163314620006cb5760405162461bcd60e51b8152600401620003099062000d86565b808210620007285760405162461bcd60e51b815260206004820152602360248201527f52466163746f72793a2052657175697265204e756d657261203c2064656e6f6d604482015262696e6160e81b606482015260840162000309565b6040805160035481526004546020820152908101839052606081018290527f6d5c96d9a68f42065e631a712e7ac0ec7df437c8c2f59f51e1b20835dfaa65f89060800160405180910390a1600391909155600455565b6009546000906001600160a01b03163314620007ae5760405162461bcd60e51b8152600401620003099062000d86565b620007b8620009e6565b600254604051630b4c774160e11b81526001600160a01b038681166004830152858116602483015262ffffff851660448301526000921690631698ee829060640160206040518083038186803b1580156200081257600080fd5b505afa15801562000827573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200084d919062000c61565b90506001600160a01b038116620008a75760405162461bcd60e51b815260206004820152601c60248201527f52466163746f72793a20706f6f6c20646f65736e277420657869737400000000604482015260640162000309565b6001600160a01b0381811660009081526005602052604090205416156200090c5760405162461bcd60e51b815260206004820152601860248201527714919858dd1bdc9e4e881490881a185cc8195e1a5cdd195960421b604482015260640162000309565b62000918308262000b51565b6001600160a01b0382811660008181526005602090815260409182902080546001600160a01b03191686861690811790915582519384529083015292945062ffffff861692878316928916917f82018bcbc24639ef4ffb9a0e6b0b0daa7640b710636d486d72c8033a36e65d57910160405180910390a4509392505050565b6009546001600160a01b03163314620009c45760405162461bcd60e51b8152600401620003099062000d86565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000a605760405162461bcd60e51b815260206004820152601960248201527f446f206e6f7420616c6c6f772044656c656761746543616c6c00000000000000604482015260640162000309565b565b6040805180820182526001600160a01b038981168083529089166020928301819052600080546001600160a01b03199081169093178155600180549093168217909255835192830152910160405160208183030381529060405280519060200120868686868660405162000ad69062000c05565b62ffffff90951685526001600160a01b03938416602086015291831660408501528216606084015216608082015260a0018190604051809103906000f590508015801562000b28573d6000803e3d6000fd5b50600080546001600160a01b031990811690915560018054909116905598975050505050505050565b6040805180820182526001600160a01b038481168083529084166020928301819052600080546001600160a01b0319908116909317815560018054909316821790925583519283015291016040516020818303038152906040528051906020012060405162000bc09062000c13565b8190604051809103906000f590508015801562000be1573d6000803e3d6000fd5b50600080546001600160a01b03199081169091556001805490911690559392505050565b6142ce8062000dce83390190565b615f18806200509c83390190565b803562ffffff8116811462000c3557600080fd5b919050565b60006020828403121562000c4d57600080fd5b813562000c5a8162000db4565b9392505050565b60006020828403121562000c7457600080fd5b815162000c5a8162000db4565b60008060006060848603121562000c9757600080fd5b833562000ca48162000db4565b9250602084013562000cb68162000db4565b915062000cc66040850162000c21565b90509250925092565b600080600080600060a0868803121562000ce857600080fd5b853562000cf58162000db4565b9450602086013562000d078162000db4565b935062000d176040870162000c21565b9250606086013562000d298162000db4565b9150608086013562000d3b8162000db4565b809150509295509295909350565b60006020828403121562000d5c57600080fd5b5035919050565b6000806040838503121562000d7757600080fd5b50508035926020909101359150565b602080825260149082015273292330b1ba37b93c9d1027b7363c9037bbb732b960611b604082015260600190565b6001600160a01b038116811462000dca57600080fd5b5056fe610160604052600060a081905260c081905260e0819052610100819052610120819052610140819052600e819055600f80546001600160801b031916905560108190556011556012805465ffffffffffff191690553480156200006157600080fd5b50604051620042ce380380620042ce833981016040819052620000849162000335565b6040518060400160405280601381526020017f526562616c616e636572204c5020546f6b656e00000000000000000000000000815250604051806040016040528060038152602001620524c560ec1b8152508160039080519060200190620000ee9291906200023a565b508051620001049060049060208401906200023a565b5050506001600581905550600080336001600160a01b031663890357306040518163ffffffff1660e01b8152600401604080518083038186803b1580156200014b57600080fd5b505afa15801562000160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001869190620002fd565b6001600160601b031960609290921b91909116608052600a8054600680546001600160a01b039a8b166001600160a01b03199182161790915560078054998b16998216999099179098556000600881905560095562ffffff9990991691881663010000000262ffffff60ff60b81b0119166001600160c01b0319909916989098171790965550600b805492851692841683179055600c80548416909217909155600d805491909316911617905550620003eb565b8280546200024890620003ae565b90600052602060002090601f0160209004810192826200026c5760008555620002b7565b82601f106200028757805160ff1916838001178555620002b7565b82800160010185558215620002b7579182015b82811115620002b75782518255916020019190600101906200029a565b50620002c5929150620002c9565b5090565b5b80821115620002c55760008155600101620002ca565b80516001600160a01b0381168114620002f857600080fd5b919050565b600080604083850312156200031157600080fd5b6200031c83620002e0565b91506200032c60208401620002e0565b90509250929050565b600080600080600060a086880312156200034e57600080fd5b855162ffffff811681146200036257600080fd5b94506200037260208701620002e0565b93506200038260408701620002e0565b92506200039260608701620002e0565b9150620003a260808701620002e0565b90509295509295909350565b600181811c90821680620003c357607f821691505b60208210811415620003e557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c613e936200043b6000396000818161066f01528181610baa01528181610e860152818161101b015281816111a201528181611286015281816119b301526121470152613e936000f3fe6080604052600436106102305760003560e01c80638b09578d1161012e578063c31c9c07116100ab578063ddca3f431161006f578063ddca3f43146106f7578063f178ad7a14610727578063f3fef3a314610747578063f55ebd2a1461077c578063f5c48474146107a357600080fd5b8063c31c9c0714610621578063c36596a614610641578063c45a01551461065d578063d21220a714610691578063dd62ed3e146106b157600080fd5b8063ac9650d8116100f2578063ac9650d814610589578063b0f285ee146105a9578063ba019dab146105c9578063bc694ea2146105de578063c040e6b8146105f357600080fd5b80638b09578d146104ff57806395d89b41146105145780639edabc2814610529578063a457c2d714610549578063a9059cbb1461056957600080fd5b8063350245c2116101bc5780634127365711610180578063412736571461045e57806350e0f5b71461047e57806370a0823114610494578063791b98bc146104ca5780637b48f1f5146104ea57600080fd5b8063350245c21461037957806335c4b49e146103f35780633950935114610409578063395696b9146104295780633dc119571461044957600080fd5b806312d1c3111161020357806312d1c311146102f657806318160ddd1461030d578063189d00ca1461032257806323b872dd14610337578063313ce5671461035757600080fd5b806306fdde0314610235578063095ea7b3146102605780630dfe1681146102905780630efe6a8b146102c8575b600080fd5b34801561024157600080fd5b5061024a6107c3565b6040516102579190613a17565b60405180910390f35b34801561026c57600080fd5b5061028061027b3660046135a2565b610855565b6040519015158152602001610257565b34801561029c57600080fd5b506006546102b0906001600160a01b031681565b6040516001600160a01b039091168152602001610257565b3480156102d457600080fd5b506102e86102e33660046135ce565b61086b565b604051908152602001610257565b34801561030257600080fd5b5061030b610ba8565b005b34801561031957600080fd5b506002546102e8565b34801561032e57600080fd5b506102e8610d80565b34801561034357600080fd5b50610280610352366004613561565b610d9a565b34801561036357600080fd5b5060125b60405160ff9091168152602001610257565b34801561038557600080fd5b50600e54600f546010546011546012546103b894936001600160801b0316929190600281810b9163010000009004900b86565b604080519687526001600160801b039095166020870152938501929092526060840152600290810b60808401520b60a082015260c001610257565b3480156103ff57600080fd5b506102e860095481565b34801561041557600080fd5b506102806104243660046135a2565b610e4d565b34801561043557600080fd5b5061030b61044436600461369a565b610e84565b34801561045557600080fd5b5061030b611019565b34801561046a57600080fd5b5061030b6104793660046134ee565b6111a0565b34801561048a57600080fd5b506102e860085481565b3480156104a057600080fd5b506102e86104af3660046134ee565b6001600160a01b031660009081526020819052604090205490565b3480156104d657600080fd5b50600c546102b0906001600160a01b031681565b3480156104f657600080fd5b5061030b611284565b34801561050b57600080fd5b50610367601281565b34801561052057600080fd5b5061024a61140e565b34801561053557600080fd5b506102e8610544366004613782565b61141d565b34801561055557600080fd5b506102806105643660046135a2565b611792565b34801561057557600080fd5b506102806105843660046135a2565b61182d565b61059c610597366004613603565b61183a565b604051610257919061398d565b3480156105b557600080fd5b50600b546102b0906001600160a01b031681565b3480156105d557600080fd5b506102e8600181565b3480156105ea57600080fd5b506102e8611992565b3480156105ff57600080fd5b50600a5461061490600160b81b900460ff1681565b60405161025791906139ef565b34801561062d57600080fd5b50600d546102b0906001600160a01b031681565b34801561064d57600080fd5b506102e8670de0b6b3a764000081565b34801561066957600080fd5b506102b07f000000000000000000000000000000000000000000000000000000000000000081565b34801561069d57600080fd5b506007546102b0906001600160a01b031681565b3480156106bd57600080fd5b506102e86106cc366004613528565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561070357600080fd5b50600a546107139062ffffff1681565b60405162ffffff9091168152602001610257565b34801561073357600080fd5b5061030b6107423660046134ee565b6119b1565b34801561075357600080fd5b506107676107623660046135a2565b611aa5565b60408051928352602083019190915201610257565b34801561078857600080fd5b50600a546102b090630100000090046001600160a01b031681565b3480156107af57600080fd5b506102e86107be3660046137cf565b611bcc565b6060600380546107d290613d8b565b80601f01602080910402602001604051908101604052809291908181526020018280546107fe90613d8b565b801561084b5780601f106108205761010080835404028352916020019161084b565b820191906000526020600020905b81548152906001019060200180831161082e57829003601f168201915b5050505050905090565b6000610862338484611f5a565b50600192915050565b6000600260055414156108c55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026005556000600a54600160b81b900460ff1660018111156108ea576108ea613df7565b146109075760405162461bcd60e51b81526004016108bc90613b29565b60008311806109165750600082115b6109325760405162461bcd60e51b81526004016108bc90613a6c565b600654604051636eb1769f60e11b815233600482015230602482015284916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561097b57600080fd5b505afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b391906137b6565b1015610a155760405162461bcd60e51b815260206004820152602b60248201527f526562616c616e6365723a20746f6b656e3020616c6c6f77616e6365203c207460448201526a1bdad95b8c105b5bdd5b9d60aa1b60648201526084016108bc565b600754604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610a5e57600080fd5b505afa158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9691906137b6565b1015610af85760405162461bcd60e51b815260206004820152602b60248201527f526562616c616e6365723a20746f6b656e3120616c6c6f77616e6365203c207460448201526a1bdad95b8c505b5bdd5b9d60aa1b60648201526084016108bc565b8215610b1657600654610b16906001600160a01b031633308661207f565b8115610b3457600754610b34906001600160a01b031633308561207f565b610b40600854846120f0565b600855600954610b5090836120f0565b6009819055600654600754600854600a54610b90946001600160a01b039485169493909316928892889290919062ffffff16610b8b60025490565b612142565b9050610b9c848261236e565b60016005559392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c39919061350b565b6001600160a01b0316336001600160a01b031614610c695760405162461bcd60e51b81526004016108bc90613af2565b600654600d5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b158015610cba57600080fd5b505af1158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf29190613678565b50600754600d5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044015b602060405180830381600087803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d9190613678565b50565b610d976402540be400670de0b6b3a7640000613d07565b81565b6000610da784848461244d565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610e2c5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016108bc565b610e408533610e3b8685613d48565b611f5a565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610862918590610e3b908690613cef565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610edd57600080fd5b505afa158015610ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f15919061350b565b6001600160a01b0316336001600160a01b031614610f455760405162461bcd60e51b81526004016108bc90613af2565b6000600a54600160b81b900460ff166001811115610f6557610f65613df7565b14610f825760405162461bcd60e51b81526004016108bc90613b29565b60006008541180610f9557506000600954115b610ff45760405162461bcd60e51b815260206004820152602a60248201527f526562616c616e6365723a204e6f7420656e6f75676820616d6f756e7420746f60448201526920726562616c616e636560b01b60648201526084016108bc565b61100084848484612625565b5050600a805460ff60b81b1916600160b81b1790555050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561107257600080fd5b505afa158015611086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110aa919061350b565b6001600160a01b0316336001600160a01b0316146110da5760405162461bcd60e51b81526004016108bc90613af2565b600654600c5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561112b57600080fd5b505af115801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190613678565b50600754600c5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401610d2b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611231919061350b565b6001600160a01b0316336001600160a01b0316146112615760405162461bcd60e51b81526004016108bc90613af2565b600d80546001600160a01b0319166001600160a01b038316179055610d7d610ba8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112dd57600080fd5b505afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611315919061350b565b6001600160a01b0316336001600160a01b0316146113455760405162461bcd60e51b81526004016108bc90613af2565b6001600a54600160b81b900460ff16600181111561136557611365613df7565b146113825760405162461bcd60e51b81526004016108bc90613a2a565b600e54600f546113a391906001600160801b031661139e612803565b612816565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a001819052600e819055600f80546001600160801b031916905560108190556011556012805465ffffffffffff19169055600a805460ff60b81b19169055565b6060600480546107d290613d8b565b600080600a54600160b81b900460ff16600181111561143e5761143e613df7565b1461145b5760405162461bcd60e51b81526004016108bc90613b29565b600061146a60208501856134ee565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a257600080fd5b505afa1580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da919061350b565b905060006114eb60208601866134ee565b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561152357600080fd5b505afa158015611537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155b919061350b565b6006549091506001600160a01b0383811691161461158b5760405162461bcd60e51b81526004016108bc90613abb565b6007546001600160a01b038281169116146115b85760405162461bcd60e51b81526004016108bc90613abb565b6115c560208601866134ee565b6001600160a01b03166323b872dd336115e160208901896134ee565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260208801356044820152606401602060405180830381600087803b15801561163357600080fd5b505af1158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166b9190613678565b5060008061167c60208801886134ee565b60405163226bf2d160e21b81523060048201526001600160a01b0391909116906389afcb44906024016040805180830381600087803b1580156116be57600080fd5b505af11580156116d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f69190613830565b9150915060008211806117095750600081115b6117255760405162461bcd60e51b81526004016108bc90613a6c565b611731600854836120f0565b60085560095461174190826120f0565b6009819055600654600754600854600a5461177c946001600160a01b039485169493909316928792879290919062ffffff16610b8b60025490565b9450611788868661236e565b5050505092915050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156118145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016108bc565b6118233385610e3b8685613d48565b5060019392505050565b600061086233848461244d565b60608167ffffffffffffffff81111561185557611855613e23565b60405190808252806020026020018201604052801561188857816020015b60608152602001906001900390816118735790505b50905060005b8281101561198b57600080308686858181106118ac576118ac613e0d565b90506020028101906118be9190613ca8565b6040516118cc929190613961565b600060405180830381855af49150503d8060008114611907576040519150601f19603f3d011682016040523d82523d6000602084013e61190c565b606091505b5091509150816119585760448151101561192557600080fd5b6004810190508080602001905181019061193f91906136e0565b60405162461bcd60e51b81526004016108bc9190613a17565b8084848151811061196b5761196b613e0d565b60200260200101819052505050808061198390613dc6565b91505061188e565b5092915050565b60016119a7670de0b6b3a76400006002613d29565b610d979190613d48565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a42919061350b565b6001600160a01b0316336001600160a01b031614611a725760405162461bcd60e51b81526004016108bc90613af2565b600b80546001600160a01b0383166001600160a01b03199182168117909255600c80549091169091179055610d7d611019565b60008060026005541415611afb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108bc565b60026005556000600a54600160b81b900460ff166001811115611b2057611b20613df7565b14611b3d5760405162461bcd60e51b81526004016108bc90613b29565b611b54611b4c846008546129ee565b600254612ad3565b9150611b65611b4c846009546129ee565b9050611b7360085483612beb565b600855600954611b839082612beb565b600955611b903384612c48565b600654611ba7906001600160a01b03168584612d97565b600754611bbe906001600160a01b03168583612d97565b600160055590939092509050565b600080600a54600160b81b900460ff166001811115611bed57611bed613df7565b14611c0a5760405162461bcd60e51b81526004016108bc90613b29565b600c5460405163133f757160e31b8152600481018590528491600091829182916001600160a01b03909116906399fbab88906024016101806040518083038186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c909190613854565b505050509750505050945094505050600660009054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b031614611ce55760405162461bcd60e51b81526004016108bc90613abb565b6007546001600160a01b03838116911614611d125760405162461bcd60e51b81526004016108bc90613abb565b600b546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015611d6457600080fd5b505af1158015611d78573d6000803e3d6000fd5b5050505060006040518060a00160405280898152602001836001600160801b031681526020016000815260200160008152602001611db4612803565b9052600c54604051630624e65f60e11b81529192506001600160a01b031690630c49ccbe90611de7908490600401613ba1565b6040805180830381600087803b158015611e0057600080fd5b505af1158015611e14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e389190613830565b5050604080516080810182528981523060208201526001600160801b038183018190526060820152600c54915163fc6f786560e01b8152909160009182916001600160a01b03169063fc6f786590611e94908690600401613b5e565b6040805180830381600087803b158015611ead57600080fd5b505af1158015611ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee59190613830565b91509150611ef5600854836120f0565b600855600954611f0590826120f0565b6009819055600654600754600854600a54611f40946001600160a01b039485169493909316928792879290919062ffffff16610b8b60025490565b9850611f4c8a8a61236e565b505050505050505092915050565b6001600160a01b038316611fbc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016108bc565b6001600160a01b03821661201d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016108bc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6040516001600160a01b03808516602483015283166044820152606481018290526120ea9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612dcc565b50505050565b6000806120fd8385613cef565b905083811015610e465760405162461bcd60e51b815260206004820152601060248201526f4552525f4144445f4f564552464c4f5760801b60448201526064016108bc565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c6bbd5a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561219e57600080fd5b505afa1580156121b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d6919061350b565b60405163f7729d4360e01b81526001600160a01b038b811660048301528c8116602483015262ffffff871660448301526064820188905260006084830181905292935083169063f7729d439060a401602060405180830381600087803b15801561223f57600080fd5b505af1158015612253573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227791906137b6565b60405163f7729d4360e01b81526001600160a01b038c811660048301528d8116602483015262ffffff88166044830152606482018b905260006084830181905292935084169063f7729d439060a401602060405180830381600087803b1580156122e057600080fd5b505af11580156122f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231891906137b6565b9050600061232689846120f0565b905060006123348c846120f0565b9050866123475794506123629350505050565b61235a61235488836129ee565b83612ad3565b955050505050505b98975050505050505050565b6001600160a01b0382166123c45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016108bc565b80600260008282546123d69190613cef565b90915550506001600160a01b03821660009081526020819052604081208054839290612403908490613cef565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0383166124b15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016108bc565b6001600160a01b0382166125135760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016108bc565b6001600160a01b0383166000908152602081905260409020548181101561258b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016108bc565b6125958282613d48565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906125cb908490613cef565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161261791815260200190565b60405180910390a350505050565b61262f8282612e9e565b600c5460408051610160810182526006546001600160a01b03908116825260075481166020830152600a5462ffffff1692820192909252600287810b606083015286900b608082015260085460a082015260095460c0820152600060e0820181905261010082018190523061012083015292839283928392919091169063883164569061014081016126bf612803565b8152506040518263ffffffff1660e01b81526004016126de9190613be4565b608060405180830381600087803b1580156126f857600080fd5b505af115801561270c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273091906137f4565b9350935093509350816008600082825461274a9190613d48565b9250508190555080600960008282546127639190613d48565b90915550506040805160c0810182528581526001600160801b039094166020850181905290840183905260608401829052600298890b6080850181905297890b60a0909401849052600e94909455600f80546001600160801b0319169094179093556010556011919091556012805491860b62ffffff90811663010000000265ffffffffffff199093169590960b90951693909317929092179092555050565b600061281142610708613cef565b905090565b6001600a54600160b81b900460ff16600181111561283657612836613df7565b146128535760405162461bcd60e51b81526004016108bc90613a2a565b6040805160a0810182528481526001600160801b03841660208201526000818301819052606082015260808101839052600c549151630624e65f60e11b815283926001600160a01b031690630c49ccbe906128b2908490600401613ba1565b6040805180830381600087803b1580156128cb57600080fd5b505af11580156128df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129039190613830565b5050604080516080810182528681523060208201526001600160801b038183018190526060820152600c54915163fc6f786560e01b8152909160009182916001600160a01b03169063fc6f78659061295f908690600401613b5e565b6040805180830381600087803b15801561297857600080fd5b505af115801561298c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b09190613830565b9150915081600860008282546129c69190613cef565b9250508190555080600960008282546129df9190613cef565b90915550505050505050505050565b6000806129fb8385613d29565b9050831580612a12575082612a108583613d07565b145b612a515760405162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b60448201526064016108bc565b6000612a666002670de0b6b3a7640000613d07565b612a709083613cef565b905081811015612ab55760405162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b60448201526064016108bc565b6000612ac9670de0b6b3a764000083613d07565b9695505050505050565b600081612b115760405162461bcd60e51b815260206004820152600c60248201526b4552525f4449565f5a45524f60a01b60448201526064016108bc565b6000612b25670de0b6b3a764000085613d29565b9050831580612b445750670de0b6b3a7640000612b428583613d07565b145b612b835760405162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b60448201526064016108bc565b6000612b90600285613d07565b612b9a9083613cef565b905081811015612bdf5760405162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b60448201526064016108bc565b6000612ac98583613d07565b6000806000612bfa8585613010565b915091508015612c405760405162461bcd60e51b81526020600482015260116024820152704552525f5355425f554e444552464c4f5760781b60448201526064016108bc565b509392505050565b6001600160a01b038216612ca85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016108bc565b6001600160a01b03821660009081526020819052604090205481811015612d1c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016108bc565b612d268282613d48565b6001600160a01b03841660009081526020819052604081209190915560028054849290612d54908490613d48565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612072565b6040516001600160a01b038316602482015260448101829052612dc790849063a9059cbb60e01b906064016120b3565b505050565b6000612e21826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130479092919063ffffffff16565b805190915015612dc75780806020019051810190612e3f9190613678565b612dc75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108bc565b612ea88183613cef565b606414612f015760405162461bcd60e51b815260206004820152602160248201527f526562616c616e6365723a20746f6b656e53686172652073756d20213d2031306044820152600360fc1b60648201526084016108bc565b60006009546008541115612f9257600854600754600654600954612f3d9392612f38926001600160a01b039182169291169061305e565b6120f0565b60088190556000600955612f53908360646131a1565b600954600654600754929350612f7a92612f38916001600160a01b0390811691168561305e565b600955600854612f8a9082612beb565b600855505050565b600954600654600754600854612fbb9392612f38926001600160a01b039182169291169061305e565b60098190556000600855612fd1908460646131a1565b600854600754600654929350612ff892612f38916001600160a01b0390811691168561305e565b6008556009546130089082612beb565b600955505050565b60008082841061302f576130248385613d48565b600091509150613040565b6130398484613d48565b6001915091505b9250929050565b606061305684846000856131c3565b949350505050565b60008161306d57506000610e46565b600d5460408051610100810182526001600160a01b0387811682528681166020830152600a5462ffffff169282019290925230606082015291169063414bf38990608081016130ba612803565b8152602080820187905260006040808401829052606093840191909152805160e086811b6001600160e01b031916825285516001600160a01b03908116600484015293860151841660248301529185015162ffffff16604482015292840151821660648401526080840151608484015260a084015160a484015260c084015160c4840152929092015190911660e482015261010401602060405180830381600087803b15801561316957600080fd5b505af115801561317d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305691906137b6565b600081156131b9576131b48484846132eb565b613056565b5060009392505050565b6060824710156132245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108bc565b843b6132725760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108bc565b600080866001600160a01b0316858760405161328e9190613971565b60006040518083038185875af1925050503d80600081146132cb576040519150601f19603f3d011682016040523d82523d6000602084013e6132d0565b606091505b50915091506132e0828286613470565b979650505050505050565b600080806000198587098587029250828110838203039150508060001415613325576000841161331a57600080fd5b508290049050610e46565b80841161333157600080fd5b60008486880980840393811190920391905060008561335281600019613d48565b61335d906001613cef565b1695869004959384900493600081900304600101905061337d8184613d29565b90931792600061338e876003613d29565b600218905061339d8188613d29565b6133a8906002613d48565b6133b29082613d29565b90506133be8188613d29565b6133c9906002613d48565b6133d39082613d29565b90506133df8188613d29565b6133ea906002613d48565b6133f49082613d29565b90506134008188613d29565b61340b906002613d48565b6134159082613d29565b90506134218188613d29565b61342c906002613d48565b6134369082613d29565b90506134428188613d29565b61344d906002613d48565b6134579082613d29565b90506134638186613d29565b9998505050505050505050565b6060831561347f575081610e46565b82511561348f5782518084602001fd5b8160405162461bcd60e51b81526004016108bc9190613a17565b80516134b481613e39565b919050565b80516134b481613e4e565b80516001600160801b03811681146134b457600080fd5b805162ffffff811681146134b457600080fd5b60006020828403121561350057600080fd5b8135610e4681613e39565b60006020828403121561351d57600080fd5b8151610e4681613e39565b6000806040838503121561353b57600080fd5b823561354681613e39565b9150602083013561355681613e39565b809150509250929050565b60008060006060848603121561357657600080fd5b833561358181613e39565b9250602084013561359181613e39565b929592945050506040919091013590565b600080604083850312156135b557600080fd5b82356135c081613e39565b946020939093013593505050565b6000806000606084860312156135e357600080fd5b83356135ee81613e39565b95602085013595506040909401359392505050565b6000806020838503121561361657600080fd5b823567ffffffffffffffff8082111561362e57600080fd5b818501915085601f83011261364257600080fd5b81358181111561365157600080fd5b8660208260051b850101111561366657600080fd5b60209290920196919550909350505050565b60006020828403121561368a57600080fd5b81518015158114610e4657600080fd5b600080600080608085870312156136b057600080fd5b84356136bb81613e4e565b935060208501356136cb81613e4e565b93969395505050506040820135916060013590565b6000602082840312156136f257600080fd5b815167ffffffffffffffff8082111561370a57600080fd5b818401915084601f83011261371e57600080fd5b81518181111561373057613730613e23565b604051601f8201601f19908116603f0116810190838211818310171561375857613758613e23565b8160405282815287602084870101111561377157600080fd5b6132e0836020830160208801613d5f565b600080828403606081121561379657600080fd5b60408112156137a457600080fd5b50829150604083013561355681613e39565b6000602082840312156137c857600080fd5b5051919050565b600080604083850312156137e257600080fd5b82359150602083013561355681613e39565b6000806000806080858703121561380a57600080fd5b8451935061381a602086016134c4565b6040860151606090960151949790965092505050565b6000806040838503121561384357600080fd5b505080516020909101519092909150565b6000806000806000806000806000806000806101808d8f03121561387757600080fd5b8c516bffffffffffffffffffffffff8116811461389357600080fd5b9b506138a160208e016134a9565b9a506138af60408e016134a9565b99506138bd60608e016134a9565b98506138cb60808e016134db565b97506138d960a08e016134b9565b96506138e760c08e016134b9565b95506138f560e08e016134c4565b94506101008d015193506101208d015192506139146101408e016134c4565b91506139236101608e016134c4565b90509295989b509295989b509295989b565b6000815180845261394d816020860160208601613d5f565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251613983818460208701613d5f565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156139e257603f198886030184526139d0858351613935565b945092850192908501906001016139b4565b5092979650505050505050565b6020810160028310613a1157634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000610e466020830184613935565b60208082526022908201527f526562616c616e6365723a204e6f7420696e207374616765204445504f534954604082015261115160f21b606082015260800190565b6020808252602f908201527f526562616c616e6365723a20456974686572206f6620746f6b656e20616d6f7560408201526e06e7473206d757374206265203e203608c1b606082015260800190565b60208082526018908201527f526562616c616e6365723a20496e76616c696420706169720000000000000000604082015260600190565b6020808252601e908201527f526562616c616e6365723a204f6e6c7920466163746f7279204f776e65720000604082015260600190565b6020808252818101527f526562616c616e6365723a204e6f7420696e20737461676520484f4c44494e47604082015260600190565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b81516001600160a01b0316815261016081016020830151613c1060208401826001600160a01b03169052565b506040830151613c27604084018262ffffff169052565b506060830151613c3c606084018260020b9052565b506080830151613c51608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151613c97828501826001600160a01b03169052565b505061014092830151919092015290565b6000808335601e19843603018112613cbf57600080fd5b83018035915067ffffffffffffffff821115613cda57600080fd5b60200191503681900382131561304057600080fd5b60008219821115613d0257613d02613de1565b500190565b600082613d2457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613d4357613d43613de1565b500290565b600082821015613d5a57613d5a613de1565b500390565b60005b83811015613d7a578181015183820152602001613d62565b838111156120ea5750506000910152565b600181811c90821680613d9f57607f821691505b60208210811415613dc057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613dda57613dda613de1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d7d57600080fd5b8060020b8114610d7d57600080fdfea2646970667358221220a392b31c510a9c87ada083b0ab0caf0359e01ca29448c77b7be2e898417ac4bb64736f6c63430008060033600180546001600160a01b031990811673c36442b4a4522e871399cd717abdd847ab11fe889081179092556002805482169092179091556003805490911673e592427a0aece92de3edee1f18e0157c05861564179055600061010081905261012081905260048190556005819055610140819052610160819052600681905560078190556101808190526101a08190526101c08190526101e08190526102008190526102208190526008819055600980546001600160801b0319169055600a819055600b819055600c805465ffffffffffff191690556102408190526102608190526102808190526103608181526103808290526102a0526103a08181526103c08290526102c0526102e08190526103008190526103e08181526104008290526103205261046060405261042081815261044082905261034052600d819055600e819055600f80546001600160401b0319169055601081905560118190556012819055601381905560148190556015805460ff191690556016819055601781905560188190556019553480156200019557600080fd5b506001600081905550600080336001600160a01b031663890357306040518163ffffffff1660e01b8152600401604080518083038186803b158015620001da57600080fd5b505afa158015620001ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002159190620003a0565b6001600160601b0319606083811b821660805282901b1660a05260408051630dfe168160e01b8152905192945090925082916001600160a01b03831691630dfe1681916004808301926020929190829003018186803b1580156200027857600080fd5b505afa1580156200028d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b391906200037b565b6001600160a01b031660c0816001600160a01b031660601b81525050806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200030957600080fd5b505afa1580156200031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034491906200037b565b60601b6001600160601b03191660e05250620003d8915050565b80516001600160a01b03811681146200037657600080fd5b919050565b6000602082840312156200038e57600080fd5b62000399826200035e565b9392505050565b60008060408385031215620003b457600080fd5b620003bf836200035e565b9150620003cf602084016200035e565b90509250929050565b60805160601c60a05160601c60c05160601c60e05160601c615980620005986000396000818161055e0152818161087101528181610a5301528181610eb9015281816115ac01528181611a9f01528181611bbd01528181611e940152818161207601528181612eb9015281816131ab015281816136df01528181613e9e015281816144fb015281816145990152818161461b01526146770152600081816101ce0152818161082001528181610a3201528181610e1301528181611567015281816119b201528181611b8201528181611e430152818161205501528181612dc3015281816130b60152818161360b01528181613e600152818161451c01528181614578015281816145fa01526146980152600081816102ae01528181613a7601528181613b1101528181613bba01528181613c5901528181613cf601528181613d9d01528181613f0001528181613f9f0152818161403e015261488f01526000818161050c0152818161063901528181610ad501528181610c85015281816120a5015281816121f401528181612c7801528181612d2a01528181612e200152818161300f015281816130fe01528181613570015261364101526159806000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063aa947930116100f9578063e2bbb15811610097578063f178ad7a11610071578063f178ad7a146105b4578063f2020275146105c7578063f6c4b6d5146105dc578063fced2e37146105ff57600080fd5b8063e2bbb15814610580578063e6fccf5d14610593578063e93573ac146105a157600080fd5b8063c45a0155116100d3578063c45a015514610507578063d0ecd0d21461052e578063d11711a214610551578063d21220a71461055957600080fd5b8063aa947930146104d9578063b0f285ee146104e1578063c31c9c07146104f457600080fd5b806357b47a1311610166578063791b98bc11610140578063791b98bc146104885780637a79cf471461049b5780638ab4c562146104a3578063a810a54c146104c657600080fd5b806357b47a1314610386578063597197fc1461038e5780635f8d96de1461048057600080fd5b80631ba326c4116101a25780631ba326c4146102d0578063350245c2146102f1578063412736571461035e57806356d6e7e51461037357600080fd5b80630dfe1681146101c95780630ecc535f1461020d57806316f0115b146102a9575b600080fd5b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61027061021b366004614d0a565b601c602090815260009182526040918290208251808401845281548152600182015481840152835180850190945260028201548452600382015492840192909252600481015460059091015491929160ff1684565b604080518551815260209586015186820152845191810191909152939092015160608401526080830152151560a082015260c001610204565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6102e36102de366004614fe8565b610612565b604051908152602001610204565b600854600954600a54600b54600c5461032394936001600160801b0316929190600281810b9163010000009004900b86565b604080519687526001600160801b039095166020870152938501929092526060840152600290810b60808401520b60a082015260c001610204565b61037161036c366004614d0a565b610637565b005b610371610381366004614f34565b610723565b610371610a84565b600d54600e54600f5460408051808201825260105481526011546020808301919091528251808401845260125481526013548183015260145460155485518087018752601654815260175481860152865180880190975260185487526019549487019490945261040c98979660070b959293919260ff909116919089565b60408051998a526020808b019990995260079790970b9689019690965284516060890152938601516080880152825160a08801529185015160c087015260e086015215156101008501528051610120850152820151610140840152805161016084015201516101808201526101a001610204565b6102e3610c71565b6002546101f0906001600160a01b031681565b610371610c83565b6004546005546104b1919082565b60408051928352602083019190915201610204565b6103716104d4366004614d44565b61142b565b61037161161b565b6001546101f0906001600160a01b031681565b6003546101f0906001600160a01b031681565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b61054161053c366004614df9565b6117c4565b6040519015158152602001610204565b610371611812565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b61037161058e366004614fa2565b61191b565b6006546007546104b1919082565b6103716105af366004614de1565b611d3f565b6103716105c2366004614d0a565b6120a3565b6105cf612190565b60405161020491906152d5565b6105416105ea366004614d0a565b601b6020526000908152604090205460ff1681565b61037161060d366004614d9b565b6121f2565b6000811561062a57610625848484612478565b61062d565b60005b90505b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069057600080fd5b505afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190614d27565b6001600160a01b0316336001600160a01b0316146107015760405162461bcd60e51b81526004016106f890615408565b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546040516323b872dd60e01b81523360048201523060248201526044810183905282916001600160a01b0316906323b872dd90606401600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b505060025460405163133f757160e31b8152600481018690526000935083925082916001600160a01b0316906399fbab88906024016101806040518083038186803b1580156107d757600080fd5b505afa1580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f9190615014565b5050505097505050509450945050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461086f5760405162461bcd60e51b81526004016106f89061539a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316146108c05760405162461bcd60e51b81526004016106f89061539a565b60006040518060a00160405280878152602001836001600160801b0316815260200160008152602001600081526020016108f8610c71565b9052600254604051630624e65f60e11b81529192506001600160a01b031690630c49ccbe9061092b9084906004016154b9565b6040805180830381600087803b15801561094457600080fd5b505af1158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190614fc4565b5050604080516080810182528781523060208201526001600160801b038183018190526060820152600254915163fc6f786560e01b8152909160009182916001600160a01b03169063fc6f7865906109d8908690600401615476565b6040805180830381600087803b1580156109f157600080fd5b505af1158015610a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a299190614fc4565b91509150610a797f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084846125fd565b505050505050505050565b60026000541415610aa75760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b15610ad35760405162461bcd60e51b81526004016106f8906153d1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cec5926c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190614f4d565b600d54610b71904361581e565b1015610bcb5760405162461bcd60e51b815260206004820152602360248201527f526562616c616e6365723a2057616974206d6f726520746f2073746172742073604482015262756d6d60e81b60648201526084016106f8565b600f805460070b906000610bde83615861565b91906101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555050610c10612785565b610c186128b8565b610c20612c73565b600f5460408051338152600792830b90920b602083015243908201527f4addd45858f29e6ddfc82bd66f88b9742f5b63db507c925aef85298d9d90bb12906060015b60405180910390a16001600055565b6000610c7e42603c615712565b905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cdc57600080fd5b505afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190614d27565b6001600160a01b0316336001600160a01b031614610d445760405162461bcd60e51b81526004016106f890615408565b60026000541415610d675760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b15610d935760405162461bcd60e51b81526004016106f8906153d1565b600854600090610df15760405162461bcd60e51b815260206004820152602360248201527f526562616c616e6365723a20506f736974696f6e206d757374206265206f70656044820152621b995960ea1b60648201526084016106f8565b60408051808201918290526370a0823160e01b909152306044820152600090807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082316064830160206040518083038186803b158015610e5c57600080fd5b505afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190614f4d565b81526040516370a0823160e01b81523060048201526020909101906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f339190614f4d565b9052604080518082019091526004546006549293506000928291610f5691615712565b8152600554600754602090920191610f6e9190615712565b9052905060005b601a5481101561122257601c6000601a8381548110610f9657610f966158e9565b60009182526020808320909101546001600160a01b03168352820192909252604001812060020154601a80549192601c9290919085908110610fda57610fda6158e9565b60009182526020808320909101546001600160a01b031683528201929092526040019020546110099190615712565b82518390611018908390615712565b905250601a8054601c9160009184908110611035576110356158e9565b60009182526020808320909101546001600160a01b03168352820192909252604001812060030154601a80549192601c9290919085908110611079576110796158e9565b60009182526020808320909101546001600160a01b031683528201929092526040019020600101546110ab9190615712565b826020018181516110bc9190615712565b9150818152505061115e601c6000601a84815481106110dd576110dd6158e9565b60009182526020808320909101546001600160a01b031683528281019390935260409182019020815160c081018352815460808201908152600183015460a083015281528251808401845260028301548152600383015481860152938101939093526004810154918301919091526005015460ff16151560608201526117c4565b156111b5576000601b6000601a848154811061117c5761117c6158e9565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055611210565b836111bf81615888565b9450506001601b6000601a84815481106111db576111db6158e9565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790555b8061121a81615888565b915050610f75565b508151815114801561123b575081602001518160200151145b6112a65760405162461bcd60e51b815260206004820152603660248201527f526562616c616e6365723a20596f7520686176656e2774206163636f756e74656044820152756420736f6d652066756e6473206d6f76656d656e747360501b60648201526084016106f8565b6112b08183612f2f565b60008367ffffffffffffffff8111156112cb576112cb6158ff565b6040519080825280602002602001820160405280156112f4578160200160208202803683370190505b5090506000935060005b601a548110156113c757601b6000601a838154811061131f5761131f6158e9565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156113b557601a818154811061135f5761135f6158e9565b9060005260206000200160009054906101000a90046001600160a01b031682868151811061138f5761138f6158e9565b6001600160a01b0390921660209283029190910190910152846113b181615888565b9550505b806113bf81615888565b9150506112fe565b50601a5481516040517f319426fcc36bac971c8f20fb2514e8d07af7bd8bd6fbb3e46da19aea082567419261140492908252602082015260400190565b60405180910390a1805161141f90601a906020840190614bdc565b50506001600055505050565b6002600054141561144e5760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b1561147a5760405162461bcd60e51b81526004016106f8906153d1565b336000908152601b602052604090205460ff166114d95760405162461bcd60e51b815260206004820152601a60248201527f526562616c616e6365723a206e6f206465706f7369742079657400000000000060448201526064016106f8565b336000908152601c602090815260408083208151808301909252805482526001810180549383019390935283815592909155821561155057600282015481518290611525908390615712565b905250600382015460208201805161153e908390615712565b90525060006002830181905560038301555b80511561158f57805161158f906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033906131d6565b6020810151156115d45760208101516115d4906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033906131d6565b7fba88e9ce2c804abf9a0e0bdb79a9591c8bc6bac6657a64298030894d1b298408338483856040516116099493929190615210565b60405180910390a15050600160005550565b6002600054141561163e5760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b600114806116645750600f54600790810b900b6002145b6116b05760405162461bcd60e51b815260206004820152601960248201527f46697273742073746172742073756d6d6172697a6174696f6e0000000000000060448201526064016106f8565b7f0b5937e89d051e6853b4b5838d041b07e024515f143c8fa1ebdbe83a2bd4709c33600d436040516116e49392919061527c565b60405180910390a1600f54600790810b900b6001141561175057600061170861323e565b9050801561174e57600f805460070b90600061172383615861565b91906101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff160217905550505b505b600f54600790810b900b600214156117bd57600e5461177157611771613784565b600061177b61388c565b905080156117bb57600f805467ffffffffffffffff191690556000600e556006541515806117aa575060075415155b6117b55760006117b7565b435b600d555b505b6001600055565b6000816040015160001480156117dd5750602082015151155b80156117ee57506020808301510151155b80156117fd5750815160200151155b801561180c5750815160200151155b92915050565b600260005414156118355760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b156118615760405162461bcd60e51b81526004016106f8906153d1565b336000908152601b602052604090205460ff166118c05760405162461bcd60e51b815260206004820152601a60248201527f526562616c616e6365723a206e6f206465706f7369742079657400000000000060448201526064016106f8565b336000818152601c60205260409081902060058101805460ff19811660ff9182161590811790925592517f032152c99c859b5112b4db6e058e334ebb14473b8bd576ce5c9576d1b6c43f3c94610c6294909392169190615256565b6002600054141561193e5760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b1561196a5760405162461bcd60e51b81526004016106f8906153d1565b60008211806119795750600081115b6119955760405162461bcd60e51b81526004016106f890615357565b604051636eb1769f60e11b815233600482015230602482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e9060440160206040518083038186803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a349190614f4d565b1015611a825760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e3020616c6c6f77616e6365203c20746f6b656e30416d6f756e740060448201526064016106f8565b604051636eb1769f60e11b815233600482015230602482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015611ae957600080fd5b505afa158015611afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b219190614f4d565b1015611b6f5760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e3120616c6c6f77616e6365203c20746f6b656e31416d6f756e740060448201526064016106f8565b8115611baa57611baa6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856139f5565b8015611be557611be56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846139f5565b336000908152601c602052604081206002018054849290611c07908490615712565b9091555050336000908152601c602052604081206003018054839290611c2e908490615712565b9091555050336000818152601c60205260409081902060058101805460ff1916600117905590517fdb84b625dfc2983618d9c2195bf34793969c4d226e7a1f66b60010ea0e127fad92611c86929091869186916152a9565b60405180910390a1336000908152601b602052604090205460ff16611d3657336000818152601b60209081526040808320805460ff19166001908117909155601a805491820181559093527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e90920180546001600160a01b0319168417905590519182527f0b0376a109cbb578b709f85f6a7befcdac3ac1ab251c99ede87f30c9572ac4d3910160405180910390a15b50506001600055565b6000611d4e6020830183614d0a565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbe9190614d27565b90506000611dcf6020840184614d0a565b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0757600080fd5b505afa158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190614d27565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614611e925760405162461bcd60e51b81526004016106f89061539a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614611ee35760405162461bcd60e51b81526004016106f89061539a565b611ef06020840184614d0a565b6001600160a01b03166323b872dd33611f0c6020870187614d0a565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260208601356044820152606401602060405180830381600087803b158015611f5e57600080fd5b505af1158015611f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f969190614d61565b50600080611fa76020860186614d0a565b60405163226bf2d160e21b81523060048201526001600160a01b0391909116906389afcb44906024016040805180830381600087803b158015611fe957600080fd5b505af1158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120219190614fc4565b9150915060008211806120345750600081115b6120505760405162461bcd60e51b81526004016106f890615357565b61209c7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084846125fd565b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120fc57600080fd5b505afa158015612110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121349190614d27565b6001600160a01b0316336001600160a01b0316146121645760405162461bcd60e51b81526004016106f890615408565b600180546001600160a01b039092166001600160a01b0319928316811790915560028054909216179055565b6060601a8054806020026020016040519081016040528092919081815260200182805480156121e857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121ca575b5050505050905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561224b57600080fd5b505afa15801561225f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122839190614d27565b6001600160a01b0316336001600160a01b0316146122b35760405162461bcd60e51b81526004016106f890615408565b600260005414156122d65760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b156123025760405162461bcd60e51b81526004016106f8906153d1565b6123386040518060400160405280600f81526020016e0696e5374616b652e616d6f756e743608c1b815250600660000154613a2d565b61236e6040518060400160405280600f81526020016e696e5374616b652e616d6f756e743160881b815250600660010154613a2d565b60065415158061237f575060075415155b6123cb5760405162461bcd60e51b815260206004820152601a60248201527f526562616c616e6365723a205374616b6520697320656d70747900000000000060448201526064016106f8565b6008546123e3576123de84848484613a72565b6123ff565b6123eb612785565b6123f36128b8565b6123ff84848484613a72565b60408051600286810b825285900b602082015290810183905260608101829052600654608082015260075460a082015260045460c082015260055460e08201527fe0f908dc9a3a317bedaca94bd5f545ed86c38d61097483f7b53d4a159a43eb43906101000160405180910390a1505060016000555050565b6000808060001985870985870292508281108382030391505080600014156124b257600084116124a757600080fd5b508290049050610630565b8084116124be57600080fd5b6000848688098084039381119092039190506000856124df8160001961581e565b6124ea906001615712565b1695869004959384900493600081900304600101905061250a81846157b7565b90931792600061251b8760036157b7565b600218905061252a81886157b7565b61253590600261581e565b61253f90826157b7565b905061254b81886157b7565b61255690600261581e565b61256090826157b7565b905061256c81886157b7565b61257790600261581e565b61258190826157b7565b905061258d81886157b7565b61259890600261581e565b6125a290826157b7565b90506125ae81886157b7565b6125b990600261581e565b6125c390826157b7565b90506125cf81886157b7565b6125da90600261581e565b6125e490826157b7565b90506125f081866157b7565b9998505050505050505050565b6002546126159085906001600160a01b03168461429c565b60025461262d9084906001600160a01b03168361429c565b336000908152601c60205260408120600201805484929061264f908490615712565b9091555050336000908152601c602052604081206003018054839290612676908490615712565b9091555050336000818152601c60205260409081902060058101805460ff1916600117905590517fdb84b625dfc2983618d9c2195bf34793969c4d226e7a1f66b60010ea0e127fad926126ce929091869186916152a9565b60405180910390a1336000908152601b602052604090205460ff1661277f57336000818152601b60209081526040808320805460ff19166001908117909155601a805491820181559093527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e90920180546001600160a01b0319168417905590519182527f0b0376a109cbb578b709f85f6a7befcdac3ac1ab251c99ede87f30c9572ac4d391015b60405180910390a15b50505050565b600854156128b6576002546040805160808101825260085481523060208201526001600160801b0381830181905260608201819052915163fc6f786560e01b8152919260009283926001600160a01b039092169163fc6f7865916127ec9190600401615476565b6040805180830381600087803b15801561280557600080fd5b505af1158015612819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283d9190614fc4565b9150915081600460000160008282546128569190615712565b909155505060058054829190600090612870908490615712565b90915550506040517fc44ad483084548c44608c0ff312a51e0ef32847bbee51d3866259cf7ac74664a906128aa908490849060049061567c565b60405180910390a15050505b565b600854156128b65760015460025460085460405163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291169063095ea7b390604401600060405180830381600087803b15801561291457600080fd5b505af1158015612928573d6000803e3d6000fd5b50506002546040805160a08101825260085481526009546001600160801b031660208201526000918101829052606081018290529093508392506001600160a01b0390911690630c49ccbe9060808101612980610c71565b8152506040518263ffffffff1660e01b815260040161299f91906154b9565b6040805180830381600087803b1580156129b857600080fd5b505af11580156129cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f09190614fc4565b6002546040805160808101825260085481523060208201526001600160801b0381830181905260608201819052915163fc6f786560e01b81529496509294509260009283926001600160a01b03169163fc6f786591612a5191600401615476565b6040805180830381600087803b158015612a6a57600080fd5b505af1158015612a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa29190614fc4565b909250905081612ab2868261581e565b612abc9190615712565b60068054600090612ace908490615712565b90915550819050612adf858261581e565b612ae99190615712565b60078054600090612afb908490615712565b909155505060015460025460085460405163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291169063095ea7b390604401600060405180830381600087803b158015612b5457600080fd5b505af1158015612b68573d6000803e3d6000fd5b5050600254600854604051630852cd8d60e31b81526001600160a01b0390921693506342966c689250612ba19160040190815260200190565b600060405180830381600087803b158015612bbb57600080fd5b505af1158015612bcf573d6000803e3d6000fd5b50506040805160c081018252600080825260208201819052818301819052606082018190526080820181905260a09091018190526008819055600980546001600160801b0319169055600a819055600b55600c805465ffffffffffff19169055517fbfa211530298cfd52f02788104797e992eae978eef411e162b4b4440b063d4b79250612c6491508790879060069061567c565b60405180910390a15050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d19d40bd6040518163ffffffff1660e01b8152600401604080518083038186803b158015612cce57600080fd5b505afa158015612ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d069190614fc4565b91509150600080612d1d6004600001548585610612565b91508115612e0557612dea7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d8157600080fd5b505afa158015612d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db99190614d27565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690846131d6565b8160046000016000828254612dff919061581e565b90915550505b600554612e13908585610612565b90508015612efb57612ee07f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e7757600080fd5b505afa158015612e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eaf9190614d27565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690836131d6565b8060046001016000828254612ef5919061581e565b90915550505b7fad6e518d74fe75cd951948faa82d2f07ea74f091d6e66c1d7eaf1d609f9f6ca8828260046040516127769392919061567c565b8151815110801590612f4957508160200151816020015110155b612fbb5760405162461bcd60e51b815260206004820152603960248201527f526562616c616e6365723a20596f75206d757374206e65766572206f7765206d60448201527f6f726520746f6b656e732c207468616e20796f7520686176650000000000000060648201526084016106f8565b7fe6c65e4a138c359ec397e29d8b8d5362a87dc44d7f16bb0f446936a1fc45ddb88183604051612fec929190615630565b60405180910390a1815181516000916130049161581e565b11156130dd576130dd7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561306657600080fd5b505afa15801561307a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309e9190614d27565b835183516130ac919061581e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906131d6565b6000826020015182602001516130f3919061581e565b11156131d2576131d27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561315557600080fd5b505afa158015613169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318d9190614d27565b836020015183602001516131a1919061581e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906131d6565b5050565b6040516001600160a01b03831660248201526044810182905261323990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143c4565b505050565b600e54600090815a905060005b601a548310156134bf57805a1015613268575050600e5550600090565b6000601c6000601a8681548110613281576132816158e9565b60009182526020808320909101546001600160a01b0316835282810193909352604091820181208251808401845282815280850183905283518085019094528284529383019190915260048054908201546014549295506132e192610612565b825183906132f0908390615712565b9052506005546004840154601454613309929190610612565b8260200181815161331a9190615712565b9052506006546004840154601454613333929190610612565b81518290613342908390615712565b905250600754600484015460145461335b929190610612565b8160200181815161336c9190615712565b905250815183548490600090613383908490615712565b909155505060208201516001840180546000906133a1908490615712565b909155505080516002840180546000906133bc908490615712565b909155505060208101516003840180546000906133da908490615712565b90915550508151601680546000906133f3908490615712565b909155505060208201516017805460009061340f908490615712565b9091555050805160188054600090613428908490615712565b9091555050602081015160198054600090613444908490615712565b909155505060006004840155600583015460ff161561349657600283015460128054600090613474908490615712565b9091555050600383015460138054600090613490908490615712565b90915550505b836134a9575a6134a6908661581e565b93505b50505082806134b790615888565b93505061324b565b601654600480546000906134d490849061581e565b9091555050601754600580546000906134ee90849061581e565b90915550506018546006805460009061350890849061581e565b90915550506019546007805460009061352290849061581e565b9091555050604080518082019091526006546004546000929182916135479190615712565b815260075460055460209092019161355f9190615712565b9052805190915015613632576136327f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135c757600080fd5b505afa1580156135db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ff9190614d27565b82516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906131d6565b602081015115613706576137067f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561369857600080fd5b505afa1580156136ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d09190614d27565b60208301516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906131d6565b60006004819055600581905560128054600690815560138054600755918390559190556040517f0b4d51621758ce7c6ac9df32916c8a483d337cb8eb22b81c2d8f43362266877c9161375d91859190600d90615656565b60405180910390a15050600060168190556017819055601881905560195550600192915050565b600654600754808211156137f5576015805460ff19166001179055600654156137b3576137b360006064614496565b81156137f0576040518060400160405280826006600101546137d5919061581e565b81526020908101849052815160105501516011556007546014555b613850565b6015805460ff19169055600754156138135761381360646000614496565b801561385057604051806040016040528083600660000154613835919061581e565b81526020908101839052815160105501516011556006546014555b7f536fe74e35f7b5d2d1d902051a047c4553c0175367694e4278359c901c4ee64a600d6040516138809190615621565b60405180910390a15050565b600e54600090815a905060005b601a548310156139ae57805a10156138b6575050600e5550600090565b6000601c6000601a86815481106138cf576138cf6158e9565b60009182526020808320909101546001600160a01b031683528201929092526040019020600581015490915060ff16156139885760155460009060ff1661392b576003820154601054601154613926929190610612565b613941565b6002820154601054601154613941929190610612565b60155490915060ff1661396357600282015461395e908290615712565b613973565b6003820154613973908290615712565b60048301555060006002820181905560038201555b8161399b575a613998908461581e565b91505b50826139a681615888565b935050613899565b7f1296f68b35e8f852c6ee5a3815b1e52b82606f025eec13363baff853db24856c816006600d6040516139e393929190615656565b60405180910390a16001935050505090565b6040516001600160a01b038085166024830152831660448201526064810182905261277f9085906323b872dd60e01b90608401613202565b6131d28282604051602401613a43929190615335565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614725565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015613acd57600080fd5b505afa158015613ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b059190614e81565b505050505091505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b6857600080fd5b505afa158015613b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba09190614d7e565b613baa90836158a3565b613bb490836157d6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c1157600080fd5b505afa158015613c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c499190614d7e565b613c5390836157d6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cb057600080fd5b505afa158015613cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce89190614d7e565b613cf290846156cb565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d4d57600080fd5b505afa158015613d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d859190614d7e565b613d8f908961572a565b613d9990836157d6565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613df457600080fd5b505afa158015613e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2c9190614d7e565b613e36908861572a565b613e4090826156cb565b9050613e4c8686614496565b600254600654613e8a916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690614746565b600254600754613ec8916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690614746565b600080600080600260009054906101000a90046001600160a01b03166001600160a01b031663883164566040518061016001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613f5757600080fd5b505afa158015613f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8f9190614d27565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613ff657600080fd5b505afa15801561400a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402e9190614d27565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561409557600080fd5b505afa1580156140a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140cd9190614f19565b62ffffff16815260028a810b602083015289900b604082015260065460608201526007546080820152600060a0820181905260c08201523060e082015261010001614116610c71565b8152506040518263ffffffff1660e01b815260040161413591906154fc565b608060405180830381600087803b15801561414f57600080fd5b505af1158015614163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141879190614f66565b935093509350935081600660000160008282546141a4919061581e565b9091555050600780548291906000906141be90849061581e565b90915550506040805160c0810182528581526001600160801b0385166020820181905281830185905260608201849052600289810b6080840181905289820b60a09094018490526008898155600980546001600160801b031916909417909355600a879055600b869055600c805494830b62ffffff90811663010000000265ffffffffffff199096169290930b909216179290921790915590517ff8c87fb00457cf273795639910be5d19ab26a00c491b3a5f1e9bfa2e93ceb5f591614286916006906155c0565b60405180910390a1505050505050505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916142f891906151f4565b6000604051808303816000865af19150503d8060008114614335576040519150601f19603f3d011682016040523d82523d6000602084013e61433a565b606091505b50915091508180156143645750805115806143645750808060200190518101906143649190614d61565b61209c5760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b60648201526084016106f8565b6000614419826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148079092919063ffffffff16565b80519091501561323957808060200190518101906144379190614d61565b6132395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106f8565b6144a08183615712565b6064146144e75760405162461bcd60e51b81526020600482015260156024820152740746f6b656e53686172652073756d20213d2031303605c1b60448201526064016106f8565b60075460065460009110156145f5576145467f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600660010154614816565b60068054600090614558908490615712565b9091555050600060075560065461457190836064610612565b90506145be7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083614816565b600780546000906145d0908490615712565b9091555050600680548291906000906145ea90849061581e565b909155506146ef9050565b6146457f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600660000154614816565b60078054600090614657908490615712565b9091555050600060065560075461467090846064610612565b90506146bd7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083614816565b600680546000906146cf908490615712565b9091555050600780548291906000906146e990849061581e565b90915550505b7f47161b4468e4b496875ef9210a96a0d96de7a4d729ce4e60cbfbf4bc139322c183838360066040516128aa94939291906156a0565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561479257600080fd5b505afa1580156147a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147ca9190614f4d565b6147d49190615712565b6040516001600160a01b03851660248201526044810182905290915061277f90859063095ea7b360e01b90606401613202565b606061062d8484600085614a79565b60008161482557506000610630565b60035461483f906001600160a01b03868116911684614746565b600360009054906101000a90046001600160a01b03166001600160a01b031663414bf389604051806101000160405280876001600160a01b03168152602001866001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156148e657600080fd5b505afa1580156148fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061491e9190614f19565b62ffffff168152306020820152604001614936610c71565b8152602080820187905260006040808401829052606093840191909152805160e086811b6001600160e01b031916825285516001600160a01b03908116600484015293860151841660248301529185015162ffffff16604482015292840151821660648401526080840151608484015260a084015160a484015260c084015160c4840152929092015190911660e482015261010401602060405180830381600087803b1580156149e557600080fd5b505af11580156149f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a1d9190614f4d565b604080516001600160a01b03808816825286166020820152908101849052606081018290529091507f25f1d03755df23c30e25db2dbd3891e31ce084bdfbfc46f9fe5e446ee5f9b2d49060800160405180910390a19392505050565b606082471015614ada5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106f8565b843b614b285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f8565b600080866001600160a01b03168587604051614b4491906151f4565b60006040518083038185875af1925050503d8060008114614b81576040519150601f19603f3d011682016040523d82523d6000602084013e614b86565b606091505b5091509150614b96828286614ba3565b925050505b949350505050565b60608315614bb2575081610630565b825115614bc25782518084602001fd5b8160405162461bcd60e51b81526004016106f89190615322565b828054828255906000526020600020908101928215614c31579160200282015b82811115614c3157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614bfc565b50614c3d929150614c41565b5090565b5b80821115614c3d5760008155600101614c42565b8051614c6181615915565b919050565b8051614c618161593b565b600060408284031215614c8357600080fd5b6040516040810181811067ffffffffffffffff82111715614cb457634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b80516001600160801b0381168114614c6157600080fd5b805161ffff81168114614c6157600080fd5b805162ffffff81168114614c6157600080fd5b600060208284031215614d1c57600080fd5b813561063081615915565b600060208284031215614d3957600080fd5b815161063081615915565b600060208284031215614d5657600080fd5b81356106308161592d565b600060208284031215614d7357600080fd5b81516106308161592d565b600060208284031215614d9057600080fd5b81516106308161593b565b60008060008060808587031215614db157600080fd5b8435614dbc8161593b565b93506020850135614dcc8161593b565b93969395505050506040820135916060013590565b600060408284031215614df357600080fd5b50919050565b600060c08284031215614e0b57600080fd5b6040516080810181811067ffffffffffffffff82111715614e3c57634e487b7160e01b600052604160045260246000fd5b604052614e498484614c71565b8152614e588460408501614c71565b60208201526080830135604082015260a0830135614e758161592d565b60608201529392505050565b600080600080600080600060e0888a031215614e9c57600080fd5b8751614ea781615915565b6020890151909750614eb88161593b565b9550614ec660408901614ce5565b9450614ed460608901614ce5565b9350614ee260808901614ce5565b925060a088015160ff81168114614ef857600080fd5b60c0890151909250614f098161592d565b8091505092959891949750929550565b600060208284031215614f2b57600080fd5b61063082614cf7565b600060208284031215614f4657600080fd5b5035919050565b600060208284031215614f5f57600080fd5b5051919050565b60008060008060808587031215614f7c57600080fd5b84519350614f8c60208601614cce565b6040860151606090960151949790965092505050565b60008060408385031215614fb557600080fd5b50508035926020909101359150565b60008060408385031215614fd757600080fd5b505080516020909101519092909150565b600080600060608486031215614ffd57600080fd5b505081359360208301359350604090920135919050565b6000806000806000806000806000806000806101808d8f03121561503757600080fd5b8c516bffffffffffffffffffffffff8116811461505357600080fd5b9b5061506160208e01614c56565b9a5061506f60408e01614c56565b995061507d60608e01614c56565b985061508b60808e01614cf7565b975061509960a08e01614c66565b96506150a760c08e01614c66565b95506150b560e08e01614cce565b94506101008d015193506101208d015192506150d46101408e01614cce565b91506150e36101608e01614cce565b90509295989b509295989b509295989b565b6000815180845261510d816020860160208601615835565b601f01601f19169290920160200192915050565b8054825260018101546020830152600281015460070b615146604084018260070b9052565b506003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e0830152600881015460ff1615156101008301526009810154610120830152600a810154610140830152600b810154610160830152600c015461018090910152565b80548252600181015460208301526002810154604083015260038101546060830152600481015460808301526005015460ff16151560a090910152565b60008251615206818460208701615835565b9190910192915050565b6001600160a01b038516815283151560208201526101408101615240604083018580518252602090810151910152565b61524d60808301846151b7565b95945050505050565b6001600160a01b038416815282151560208201526101008101614b9b60408301846151b7565b6001600160a01b03841681526101e0810161529a6020830185615121565b826101c0830152949350505050565b6001600160a01b03851681526020810184905260408101839052610120810161524d60608301846151b7565b6020808252825182820181905260009190848201906040850190845b818110156153165783516001600160a01b0316835292840192918401916001016152f1565b50909695505050505050565b60208152600061063060208301846150f5565b60408152600061534860408301856150f5565b90508260208301529392505050565b60208082526023908201527f456974686572206f6620746f6b656e20616d6f756e7473206d7573742062652060408201526203e20360ec1b606082015260800190565b60208082526018908201527f526562616c616e6365723a20496e76616c696420706169720000000000000000604082015260600190565b6020808252601a908201527f526562616c616e6365723a204e6f7420696e2073746167652030000000000000604082015260600190565b6020808252601e908201527f526562616c616e6365723a204f6e6c7920466163746f7279204f776e65720000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b81516001600160a01b031681526101608101602083015161552860208401826001600160a01b03169052565b50604083015161553f604084018262ffffff169052565b506060830151615554606084018260020b9052565b506080830151615569608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516155af828501826001600160a01b03169052565b505061014092830151919092015290565b825481526001808401546001600160801b03166020830152600280850154604084015260038501546060840152600485015480820b820b608085015260181c810b900b60a0830152825460c083015282015460e08201526101008101610630565b6101a0810161180c8284615121565b825181526020808401518183015282516040830152820151606082015260808101610630565b83815282546020820152600183015460408201526102008101614b9b6060830184615121565b83815260208101839052815460408201526001820154606082015260808101614b9b565b8481526020810184905260408101839052815460608201526001820154608082015260a0810161524d565b60008160020b8360020b6000821282627fffff038213811516156156f1576156f16158d3565b82627fffff19038212811615615709576157096158d3565b50019392505050565b60008219821115615725576157256158d3565b500190565b60008160020b8360020b627fffff600082136000841383830485118282161615615756576157566158d3565b627fffff196000851282811687830587121615615775576157756158d3565b60008712925085820587128484161615615791576157916158d3565b858505871281841616156157a7576157a76158d3565b5050509290910295945050505050565b60008160001904831182151516156157d1576157d16158d3565b500290565b60008160020b8360020b6000811281627fffff19018312811516156157fd576157fd6158d3565b81627fffff018313811615615814576158146158d3565b5090039392505050565b600082821015615830576158306158d3565b500390565b60005b83811015615850578181015183820152602001615838565b8381111561277f5750506000910152565b60008160070b677fffffffffffffff81141561587f5761587f6158d3565b60010192915050565b600060001982141561589c5761589c6158d3565b5060010190565b60008260020b806158c457634e487b7160e01b600052601260045260246000fd5b808360020b0791505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461592a57600080fd5b50565b801515811461592a57600080fd5b8060020b811461592a57600080fdfea26469706673582212204db436ca5a294928b803708121d36743e273d911e4d708e9c226093a7280f56b64736f6c63430008060033a2646970667358221220bec79ed8841c076a51f6dda3731c0b8c193cb151e0c2ca7fe3b3afe085c4b1f264736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001095760003560e01c80638903573011620000a3578063cec5926c116200006e578063cec5926c146200025b578063d19d40bd1462000274578063e2cfcfee1462000299578063f7960e4014620002b057600080fd5b80638903573014620001e05780638da5cb5b146200021c5780639776bc961462000230578063c6bbd5a7146200024757600080fd5b8063401e388311620000e4578063401e388314620001555780634b3484aa14620001895780635b54918214620001a05780636463e94c14620001b457600080fd5b80630f944b22146200010e57806313af40351462000127578063219248ab146200013e575b600080fd5b620001256200011f36600462000d49565b620002dc565b005b620001256200013836600462000c3a565b620003a6565b620001256200014f36600462000c3a565b6200042f565b6200016c6200016636600462000ccf565b6200047e565b6040516001600160a01b0390911681526020015b60405180910390f35b620001256200019a36600462000d63565b6200069e565b6002546200016c906001600160a01b031681565b6200016c620001c536600462000c3a565b6005602052600090815260409020546001600160a01b031681565b600054600154620001fb916001600160a01b03908116911682565b604080516001600160a01b0393841681529290911660208301520162000180565b6009546200016c906001600160a01b031681565b6200016c6200024136600462000c81565b6200077e565b6007546200016c906001600160a01b031681565b6200026560085481565b60405190815260200162000180565b60035460045462000283919082565b6040805192835260208301919091520162000180565b62000125620002aa36600462000c3a565b62000997565b6200016c620002c136600462000c3a565b6006602052600090815260409020546001600160a01b031681565b6009546001600160a01b03163314620003125760405162461bcd60e51b8152600401620003099062000d86565b60405180910390fd5b60085460408051918252602082018390527f92712b205503d05acd90de7b50dedf0600198f6231af17fb8dfee6ad74236a27910160405180910390a1612d518110620003a15760405162461bcd60e51b815260206004820152601e60248201527f52466163746f72793a206e656564206c657373207468616e2031313630310000604482015260640162000309565b600855565b6009546001600160a01b03163314620003d35760405162461bcd60e51b8152600401620003099062000d86565b6009546040516001600160a01b038084169216907fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c90600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031633146200045c5760405162461bcd60e51b8152600401620003099062000d86565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6009546000906001600160a01b03163314620004ae5760405162461bcd60e51b8152600401620003099062000d86565b620004b8620009e6565b600254604051630b4c774160e11b81526001600160a01b038881166004830152878116602483015262ffffff871660448301526000921690631698ee829060640160206040518083038186803b1580156200051257600080fd5b505afa15801562000527573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200054d919062000c61565b90506001600160a01b038116620005a75760405162461bcd60e51b815260206004820152601c60248201527f52466163746f72793a20706f6f6c20646f65736e277420657869737400000000604482015260640162000309565b6001600160a01b0381811660009081526006602052604090205416156200060c5760405162461bcd60e51b815260206004820152601860248201527714919858dd1bdc9e4e881490881a185cc8195e1a5cdd195960421b604482015260640162000309565b6200061d3082878a8a898962000a62565b6001600160a01b0382811660008181526006602090815260409182902080546001600160a01b03191686861690811790915582519384529083015292945062ffffff881692898316928b16917f6c15140167e1d05aa492ca7e0125d8dc1755fb743e5202b6c5fefc2b25aad831910160405180910390a45095945050505050565b6009546001600160a01b03163314620006cb5760405162461bcd60e51b8152600401620003099062000d86565b808210620007285760405162461bcd60e51b815260206004820152602360248201527f52466163746f72793a2052657175697265204e756d657261203c2064656e6f6d604482015262696e6160e81b606482015260840162000309565b6040805160035481526004546020820152908101839052606081018290527f6d5c96d9a68f42065e631a712e7ac0ec7df437c8c2f59f51e1b20835dfaa65f89060800160405180910390a1600391909155600455565b6009546000906001600160a01b03163314620007ae5760405162461bcd60e51b8152600401620003099062000d86565b620007b8620009e6565b600254604051630b4c774160e11b81526001600160a01b038681166004830152858116602483015262ffffff851660448301526000921690631698ee829060640160206040518083038186803b1580156200081257600080fd5b505afa15801562000827573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200084d919062000c61565b90506001600160a01b038116620008a75760405162461bcd60e51b815260206004820152601c60248201527f52466163746f72793a20706f6f6c20646f65736e277420657869737400000000604482015260640162000309565b6001600160a01b0381811660009081526005602052604090205416156200090c5760405162461bcd60e51b815260206004820152601860248201527714919858dd1bdc9e4e881490881a185cc8195e1a5cdd195960421b604482015260640162000309565b62000918308262000b51565b6001600160a01b0382811660008181526005602090815260409182902080546001600160a01b03191686861690811790915582519384529083015292945062ffffff861692878316928916917f82018bcbc24639ef4ffb9a0e6b0b0daa7640b710636d486d72c8033a36e65d57910160405180910390a4509392505050565b6009546001600160a01b03163314620009c45760405162461bcd60e51b8152600401620003099062000d86565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000a605760405162461bcd60e51b815260206004820152601960248201527f446f206e6f7420616c6c6f772044656c656761746543616c6c00000000000000604482015260640162000309565b565b6040805180820182526001600160a01b038981168083529089166020928301819052600080546001600160a01b03199081169093178155600180549093168217909255835192830152910160405160208183030381529060405280519060200120868686868660405162000ad69062000c05565b62ffffff90951685526001600160a01b03938416602086015291831660408501528216606084015216608082015260a0018190604051809103906000f590508015801562000b28573d6000803e3d6000fd5b50600080546001600160a01b031990811690915560018054909116905598975050505050505050565b6040805180820182526001600160a01b038481168083529084166020928301819052600080546001600160a01b0319908116909317815560018054909316821790925583519283015291016040516020818303038152906040528051906020012060405162000bc09062000c13565b8190604051809103906000f590508015801562000be1573d6000803e3d6000fd5b50600080546001600160a01b03199081169091556001805490911690559392505050565b6142ce8062000dce83390190565b615f18806200509c83390190565b803562ffffff8116811462000c3557600080fd5b919050565b60006020828403121562000c4d57600080fd5b813562000c5a8162000db4565b9392505050565b60006020828403121562000c7457600080fd5b815162000c5a8162000db4565b60008060006060848603121562000c9757600080fd5b833562000ca48162000db4565b9250602084013562000cb68162000db4565b915062000cc66040850162000c21565b90509250925092565b600080600080600060a0868803121562000ce857600080fd5b853562000cf58162000db4565b9450602086013562000d078162000db4565b935062000d176040870162000c21565b9250606086013562000d298162000db4565b9150608086013562000d3b8162000db4565b809150509295509295909350565b60006020828403121562000d5c57600080fd5b5035919050565b6000806040838503121562000d7757600080fd5b50508035926020909101359150565b602080825260149082015273292330b1ba37b93c9d1027b7363c9037bbb732b960611b604082015260600190565b6001600160a01b038116811462000dca57600080fd5b5056fe610160604052600060a081905260c081905260e0819052610100819052610120819052610140819052600e819055600f80546001600160801b031916905560108190556011556012805465ffffffffffff191690553480156200006157600080fd5b50604051620042ce380380620042ce833981016040819052620000849162000335565b6040518060400160405280601381526020017f526562616c616e636572204c5020546f6b656e00000000000000000000000000815250604051806040016040528060038152602001620524c560ec1b8152508160039080519060200190620000ee9291906200023a565b508051620001049060049060208401906200023a565b5050506001600581905550600080336001600160a01b031663890357306040518163ffffffff1660e01b8152600401604080518083038186803b1580156200014b57600080fd5b505afa15801562000160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001869190620002fd565b6001600160601b031960609290921b91909116608052600a8054600680546001600160a01b039a8b166001600160a01b03199182161790915560078054998b16998216999099179098556000600881905560095562ffffff9990991691881663010000000262ffffff60ff60b81b0119166001600160c01b0319909916989098171790965550600b805492851692841683179055600c80548416909217909155600d805491909316911617905550620003eb565b8280546200024890620003ae565b90600052602060002090601f0160209004810192826200026c5760008555620002b7565b82601f106200028757805160ff1916838001178555620002b7565b82800160010185558215620002b7579182015b82811115620002b75782518255916020019190600101906200029a565b50620002c5929150620002c9565b5090565b5b80821115620002c55760008155600101620002ca565b80516001600160a01b0381168114620002f857600080fd5b919050565b600080604083850312156200031157600080fd5b6200031c83620002e0565b91506200032c60208401620002e0565b90509250929050565b600080600080600060a086880312156200034e57600080fd5b855162ffffff811681146200036257600080fd5b94506200037260208701620002e0565b93506200038260408701620002e0565b92506200039260608701620002e0565b9150620003a260808701620002e0565b90509295509295909350565b600181811c90821680620003c357607f821691505b60208210811415620003e557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c613e936200043b6000396000818161066f01528181610baa01528181610e860152818161101b015281816111a201528181611286015281816119b301526121470152613e936000f3fe6080604052600436106102305760003560e01c80638b09578d1161012e578063c31c9c07116100ab578063ddca3f431161006f578063ddca3f43146106f7578063f178ad7a14610727578063f3fef3a314610747578063f55ebd2a1461077c578063f5c48474146107a357600080fd5b8063c31c9c0714610621578063c36596a614610641578063c45a01551461065d578063d21220a714610691578063dd62ed3e146106b157600080fd5b8063ac9650d8116100f2578063ac9650d814610589578063b0f285ee146105a9578063ba019dab146105c9578063bc694ea2146105de578063c040e6b8146105f357600080fd5b80638b09578d146104ff57806395d89b41146105145780639edabc2814610529578063a457c2d714610549578063a9059cbb1461056957600080fd5b8063350245c2116101bc5780634127365711610180578063412736571461045e57806350e0f5b71461047e57806370a0823114610494578063791b98bc146104ca5780637b48f1f5146104ea57600080fd5b8063350245c21461037957806335c4b49e146103f35780633950935114610409578063395696b9146104295780633dc119571461044957600080fd5b806312d1c3111161020357806312d1c311146102f657806318160ddd1461030d578063189d00ca1461032257806323b872dd14610337578063313ce5671461035757600080fd5b806306fdde0314610235578063095ea7b3146102605780630dfe1681146102905780630efe6a8b146102c8575b600080fd5b34801561024157600080fd5b5061024a6107c3565b6040516102579190613a17565b60405180910390f35b34801561026c57600080fd5b5061028061027b3660046135a2565b610855565b6040519015158152602001610257565b34801561029c57600080fd5b506006546102b0906001600160a01b031681565b6040516001600160a01b039091168152602001610257565b3480156102d457600080fd5b506102e86102e33660046135ce565b61086b565b604051908152602001610257565b34801561030257600080fd5b5061030b610ba8565b005b34801561031957600080fd5b506002546102e8565b34801561032e57600080fd5b506102e8610d80565b34801561034357600080fd5b50610280610352366004613561565b610d9a565b34801561036357600080fd5b5060125b60405160ff9091168152602001610257565b34801561038557600080fd5b50600e54600f546010546011546012546103b894936001600160801b0316929190600281810b9163010000009004900b86565b604080519687526001600160801b039095166020870152938501929092526060840152600290810b60808401520b60a082015260c001610257565b3480156103ff57600080fd5b506102e860095481565b34801561041557600080fd5b506102806104243660046135a2565b610e4d565b34801561043557600080fd5b5061030b61044436600461369a565b610e84565b34801561045557600080fd5b5061030b611019565b34801561046a57600080fd5b5061030b6104793660046134ee565b6111a0565b34801561048a57600080fd5b506102e860085481565b3480156104a057600080fd5b506102e86104af3660046134ee565b6001600160a01b031660009081526020819052604090205490565b3480156104d657600080fd5b50600c546102b0906001600160a01b031681565b3480156104f657600080fd5b5061030b611284565b34801561050b57600080fd5b50610367601281565b34801561052057600080fd5b5061024a61140e565b34801561053557600080fd5b506102e8610544366004613782565b61141d565b34801561055557600080fd5b506102806105643660046135a2565b611792565b34801561057557600080fd5b506102806105843660046135a2565b61182d565b61059c610597366004613603565b61183a565b604051610257919061398d565b3480156105b557600080fd5b50600b546102b0906001600160a01b031681565b3480156105d557600080fd5b506102e8600181565b3480156105ea57600080fd5b506102e8611992565b3480156105ff57600080fd5b50600a5461061490600160b81b900460ff1681565b60405161025791906139ef565b34801561062d57600080fd5b50600d546102b0906001600160a01b031681565b34801561064d57600080fd5b506102e8670de0b6b3a764000081565b34801561066957600080fd5b506102b07f000000000000000000000000000000000000000000000000000000000000000081565b34801561069d57600080fd5b506007546102b0906001600160a01b031681565b3480156106bd57600080fd5b506102e86106cc366004613528565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561070357600080fd5b50600a546107139062ffffff1681565b60405162ffffff9091168152602001610257565b34801561073357600080fd5b5061030b6107423660046134ee565b6119b1565b34801561075357600080fd5b506107676107623660046135a2565b611aa5565b60408051928352602083019190915201610257565b34801561078857600080fd5b50600a546102b090630100000090046001600160a01b031681565b3480156107af57600080fd5b506102e86107be3660046137cf565b611bcc565b6060600380546107d290613d8b565b80601f01602080910402602001604051908101604052809291908181526020018280546107fe90613d8b565b801561084b5780601f106108205761010080835404028352916020019161084b565b820191906000526020600020905b81548152906001019060200180831161082e57829003601f168201915b5050505050905090565b6000610862338484611f5a565b50600192915050565b6000600260055414156108c55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026005556000600a54600160b81b900460ff1660018111156108ea576108ea613df7565b146109075760405162461bcd60e51b81526004016108bc90613b29565b60008311806109165750600082115b6109325760405162461bcd60e51b81526004016108bc90613a6c565b600654604051636eb1769f60e11b815233600482015230602482015284916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561097b57600080fd5b505afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b391906137b6565b1015610a155760405162461bcd60e51b815260206004820152602b60248201527f526562616c616e6365723a20746f6b656e3020616c6c6f77616e6365203c207460448201526a1bdad95b8c105b5bdd5b9d60aa1b60648201526084016108bc565b600754604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610a5e57600080fd5b505afa158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9691906137b6565b1015610af85760405162461bcd60e51b815260206004820152602b60248201527f526562616c616e6365723a20746f6b656e3120616c6c6f77616e6365203c207460448201526a1bdad95b8c505b5bdd5b9d60aa1b60648201526084016108bc565b8215610b1657600654610b16906001600160a01b031633308661207f565b8115610b3457600754610b34906001600160a01b031633308561207f565b610b40600854846120f0565b600855600954610b5090836120f0565b6009819055600654600754600854600a54610b90946001600160a01b039485169493909316928892889290919062ffffff16610b8b60025490565b612142565b9050610b9c848261236e565b60016005559392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c39919061350b565b6001600160a01b0316336001600160a01b031614610c695760405162461bcd60e51b81526004016108bc90613af2565b600654600d5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b158015610cba57600080fd5b505af1158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf29190613678565b50600754600d5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044015b602060405180830381600087803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d9190613678565b50565b610d976402540be400670de0b6b3a7640000613d07565b81565b6000610da784848461244d565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610e2c5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016108bc565b610e408533610e3b8685613d48565b611f5a565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610862918590610e3b908690613cef565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610edd57600080fd5b505afa158015610ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f15919061350b565b6001600160a01b0316336001600160a01b031614610f455760405162461bcd60e51b81526004016108bc90613af2565b6000600a54600160b81b900460ff166001811115610f6557610f65613df7565b14610f825760405162461bcd60e51b81526004016108bc90613b29565b60006008541180610f9557506000600954115b610ff45760405162461bcd60e51b815260206004820152602a60248201527f526562616c616e6365723a204e6f7420656e6f75676820616d6f756e7420746f60448201526920726562616c616e636560b01b60648201526084016108bc565b61100084848484612625565b5050600a805460ff60b81b1916600160b81b1790555050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561107257600080fd5b505afa158015611086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110aa919061350b565b6001600160a01b0316336001600160a01b0316146110da5760405162461bcd60e51b81526004016108bc90613af2565b600654600c5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561112b57600080fd5b505af115801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190613678565b50600754600c5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401610d2b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611231919061350b565b6001600160a01b0316336001600160a01b0316146112615760405162461bcd60e51b81526004016108bc90613af2565b600d80546001600160a01b0319166001600160a01b038316179055610d7d610ba8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112dd57600080fd5b505afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611315919061350b565b6001600160a01b0316336001600160a01b0316146113455760405162461bcd60e51b81526004016108bc90613af2565b6001600a54600160b81b900460ff16600181111561136557611365613df7565b146113825760405162461bcd60e51b81526004016108bc90613a2a565b600e54600f546113a391906001600160801b031661139e612803565b612816565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a001819052600e819055600f80546001600160801b031916905560108190556011556012805465ffffffffffff19169055600a805460ff60b81b19169055565b6060600480546107d290613d8b565b600080600a54600160b81b900460ff16600181111561143e5761143e613df7565b1461145b5760405162461bcd60e51b81526004016108bc90613b29565b600061146a60208501856134ee565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a257600080fd5b505afa1580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da919061350b565b905060006114eb60208601866134ee565b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561152357600080fd5b505afa158015611537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155b919061350b565b6006549091506001600160a01b0383811691161461158b5760405162461bcd60e51b81526004016108bc90613abb565b6007546001600160a01b038281169116146115b85760405162461bcd60e51b81526004016108bc90613abb565b6115c560208601866134ee565b6001600160a01b03166323b872dd336115e160208901896134ee565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260208801356044820152606401602060405180830381600087803b15801561163357600080fd5b505af1158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166b9190613678565b5060008061167c60208801886134ee565b60405163226bf2d160e21b81523060048201526001600160a01b0391909116906389afcb44906024016040805180830381600087803b1580156116be57600080fd5b505af11580156116d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f69190613830565b9150915060008211806117095750600081115b6117255760405162461bcd60e51b81526004016108bc90613a6c565b611731600854836120f0565b60085560095461174190826120f0565b6009819055600654600754600854600a5461177c946001600160a01b039485169493909316928792879290919062ffffff16610b8b60025490565b9450611788868661236e565b5050505092915050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156118145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016108bc565b6118233385610e3b8685613d48565b5060019392505050565b600061086233848461244d565b60608167ffffffffffffffff81111561185557611855613e23565b60405190808252806020026020018201604052801561188857816020015b60608152602001906001900390816118735790505b50905060005b8281101561198b57600080308686858181106118ac576118ac613e0d565b90506020028101906118be9190613ca8565b6040516118cc929190613961565b600060405180830381855af49150503d8060008114611907576040519150601f19603f3d011682016040523d82523d6000602084013e61190c565b606091505b5091509150816119585760448151101561192557600080fd5b6004810190508080602001905181019061193f91906136e0565b60405162461bcd60e51b81526004016108bc9190613a17565b8084848151811061196b5761196b613e0d565b60200260200101819052505050808061198390613dc6565b91505061188e565b5092915050565b60016119a7670de0b6b3a76400006002613d29565b610d979190613d48565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a42919061350b565b6001600160a01b0316336001600160a01b031614611a725760405162461bcd60e51b81526004016108bc90613af2565b600b80546001600160a01b0383166001600160a01b03199182168117909255600c80549091169091179055610d7d611019565b60008060026005541415611afb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108bc565b60026005556000600a54600160b81b900460ff166001811115611b2057611b20613df7565b14611b3d5760405162461bcd60e51b81526004016108bc90613b29565b611b54611b4c846008546129ee565b600254612ad3565b9150611b65611b4c846009546129ee565b9050611b7360085483612beb565b600855600954611b839082612beb565b600955611b903384612c48565b600654611ba7906001600160a01b03168584612d97565b600754611bbe906001600160a01b03168583612d97565b600160055590939092509050565b600080600a54600160b81b900460ff166001811115611bed57611bed613df7565b14611c0a5760405162461bcd60e51b81526004016108bc90613b29565b600c5460405163133f757160e31b8152600481018590528491600091829182916001600160a01b03909116906399fbab88906024016101806040518083038186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c909190613854565b505050509750505050945094505050600660009054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b031614611ce55760405162461bcd60e51b81526004016108bc90613abb565b6007546001600160a01b03838116911614611d125760405162461bcd60e51b81526004016108bc90613abb565b600b546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015611d6457600080fd5b505af1158015611d78573d6000803e3d6000fd5b5050505060006040518060a00160405280898152602001836001600160801b031681526020016000815260200160008152602001611db4612803565b9052600c54604051630624e65f60e11b81529192506001600160a01b031690630c49ccbe90611de7908490600401613ba1565b6040805180830381600087803b158015611e0057600080fd5b505af1158015611e14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e389190613830565b5050604080516080810182528981523060208201526001600160801b038183018190526060820152600c54915163fc6f786560e01b8152909160009182916001600160a01b03169063fc6f786590611e94908690600401613b5e565b6040805180830381600087803b158015611ead57600080fd5b505af1158015611ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee59190613830565b91509150611ef5600854836120f0565b600855600954611f0590826120f0565b6009819055600654600754600854600a54611f40946001600160a01b039485169493909316928792879290919062ffffff16610b8b60025490565b9850611f4c8a8a61236e565b505050505050505092915050565b6001600160a01b038316611fbc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016108bc565b6001600160a01b03821661201d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016108bc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6040516001600160a01b03808516602483015283166044820152606481018290526120ea9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612dcc565b50505050565b6000806120fd8385613cef565b905083811015610e465760405162461bcd60e51b815260206004820152601060248201526f4552525f4144445f4f564552464c4f5760801b60448201526064016108bc565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c6bbd5a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561219e57600080fd5b505afa1580156121b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d6919061350b565b60405163f7729d4360e01b81526001600160a01b038b811660048301528c8116602483015262ffffff871660448301526064820188905260006084830181905292935083169063f7729d439060a401602060405180830381600087803b15801561223f57600080fd5b505af1158015612253573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227791906137b6565b60405163f7729d4360e01b81526001600160a01b038c811660048301528d8116602483015262ffffff88166044830152606482018b905260006084830181905292935084169063f7729d439060a401602060405180830381600087803b1580156122e057600080fd5b505af11580156122f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231891906137b6565b9050600061232689846120f0565b905060006123348c846120f0565b9050866123475794506123629350505050565b61235a61235488836129ee565b83612ad3565b955050505050505b98975050505050505050565b6001600160a01b0382166123c45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016108bc565b80600260008282546123d69190613cef565b90915550506001600160a01b03821660009081526020819052604081208054839290612403908490613cef565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0383166124b15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016108bc565b6001600160a01b0382166125135760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016108bc565b6001600160a01b0383166000908152602081905260409020548181101561258b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016108bc565b6125958282613d48565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906125cb908490613cef565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161261791815260200190565b60405180910390a350505050565b61262f8282612e9e565b600c5460408051610160810182526006546001600160a01b03908116825260075481166020830152600a5462ffffff1692820192909252600287810b606083015286900b608082015260085460a082015260095460c0820152600060e0820181905261010082018190523061012083015292839283928392919091169063883164569061014081016126bf612803565b8152506040518263ffffffff1660e01b81526004016126de9190613be4565b608060405180830381600087803b1580156126f857600080fd5b505af115801561270c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273091906137f4565b9350935093509350816008600082825461274a9190613d48565b9250508190555080600960008282546127639190613d48565b90915550506040805160c0810182528581526001600160801b039094166020850181905290840183905260608401829052600298890b6080850181905297890b60a0909401849052600e94909455600f80546001600160801b0319169094179093556010556011919091556012805491860b62ffffff90811663010000000265ffffffffffff199093169590960b90951693909317929092179092555050565b600061281142610708613cef565b905090565b6001600a54600160b81b900460ff16600181111561283657612836613df7565b146128535760405162461bcd60e51b81526004016108bc90613a2a565b6040805160a0810182528481526001600160801b03841660208201526000818301819052606082015260808101839052600c549151630624e65f60e11b815283926001600160a01b031690630c49ccbe906128b2908490600401613ba1565b6040805180830381600087803b1580156128cb57600080fd5b505af11580156128df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129039190613830565b5050604080516080810182528681523060208201526001600160801b038183018190526060820152600c54915163fc6f786560e01b8152909160009182916001600160a01b03169063fc6f78659061295f908690600401613b5e565b6040805180830381600087803b15801561297857600080fd5b505af115801561298c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b09190613830565b9150915081600860008282546129c69190613cef565b9250508190555080600960008282546129df9190613cef565b90915550505050505050505050565b6000806129fb8385613d29565b9050831580612a12575082612a108583613d07565b145b612a515760405162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b60448201526064016108bc565b6000612a666002670de0b6b3a7640000613d07565b612a709083613cef565b905081811015612ab55760405162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b60448201526064016108bc565b6000612ac9670de0b6b3a764000083613d07565b9695505050505050565b600081612b115760405162461bcd60e51b815260206004820152600c60248201526b4552525f4449565f5a45524f60a01b60448201526064016108bc565b6000612b25670de0b6b3a764000085613d29565b9050831580612b445750670de0b6b3a7640000612b428583613d07565b145b612b835760405162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b60448201526064016108bc565b6000612b90600285613d07565b612b9a9083613cef565b905081811015612bdf5760405162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b60448201526064016108bc565b6000612ac98583613d07565b6000806000612bfa8585613010565b915091508015612c405760405162461bcd60e51b81526020600482015260116024820152704552525f5355425f554e444552464c4f5760781b60448201526064016108bc565b509392505050565b6001600160a01b038216612ca85760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016108bc565b6001600160a01b03821660009081526020819052604090205481811015612d1c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016108bc565b612d268282613d48565b6001600160a01b03841660009081526020819052604081209190915560028054849290612d54908490613d48565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612072565b6040516001600160a01b038316602482015260448101829052612dc790849063a9059cbb60e01b906064016120b3565b505050565b6000612e21826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130479092919063ffffffff16565b805190915015612dc75780806020019051810190612e3f9190613678565b612dc75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108bc565b612ea88183613cef565b606414612f015760405162461bcd60e51b815260206004820152602160248201527f526562616c616e6365723a20746f6b656e53686172652073756d20213d2031306044820152600360fc1b60648201526084016108bc565b60006009546008541115612f9257600854600754600654600954612f3d9392612f38926001600160a01b039182169291169061305e565b6120f0565b60088190556000600955612f53908360646131a1565b600954600654600754929350612f7a92612f38916001600160a01b0390811691168561305e565b600955600854612f8a9082612beb565b600855505050565b600954600654600754600854612fbb9392612f38926001600160a01b039182169291169061305e565b60098190556000600855612fd1908460646131a1565b600854600754600654929350612ff892612f38916001600160a01b0390811691168561305e565b6008556009546130089082612beb565b600955505050565b60008082841061302f576130248385613d48565b600091509150613040565b6130398484613d48565b6001915091505b9250929050565b606061305684846000856131c3565b949350505050565b60008161306d57506000610e46565b600d5460408051610100810182526001600160a01b0387811682528681166020830152600a5462ffffff169282019290925230606082015291169063414bf38990608081016130ba612803565b8152602080820187905260006040808401829052606093840191909152805160e086811b6001600160e01b031916825285516001600160a01b03908116600484015293860151841660248301529185015162ffffff16604482015292840151821660648401526080840151608484015260a084015160a484015260c084015160c4840152929092015190911660e482015261010401602060405180830381600087803b15801561316957600080fd5b505af115801561317d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305691906137b6565b600081156131b9576131b48484846132eb565b613056565b5060009392505050565b6060824710156132245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108bc565b843b6132725760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108bc565b600080866001600160a01b0316858760405161328e9190613971565b60006040518083038185875af1925050503d80600081146132cb576040519150601f19603f3d011682016040523d82523d6000602084013e6132d0565b606091505b50915091506132e0828286613470565b979650505050505050565b600080806000198587098587029250828110838203039150508060001415613325576000841161331a57600080fd5b508290049050610e46565b80841161333157600080fd5b60008486880980840393811190920391905060008561335281600019613d48565b61335d906001613cef565b1695869004959384900493600081900304600101905061337d8184613d29565b90931792600061338e876003613d29565b600218905061339d8188613d29565b6133a8906002613d48565b6133b29082613d29565b90506133be8188613d29565b6133c9906002613d48565b6133d39082613d29565b90506133df8188613d29565b6133ea906002613d48565b6133f49082613d29565b90506134008188613d29565b61340b906002613d48565b6134159082613d29565b90506134218188613d29565b61342c906002613d48565b6134369082613d29565b90506134428188613d29565b61344d906002613d48565b6134579082613d29565b90506134638186613d29565b9998505050505050505050565b6060831561347f575081610e46565b82511561348f5782518084602001fd5b8160405162461bcd60e51b81526004016108bc9190613a17565b80516134b481613e39565b919050565b80516134b481613e4e565b80516001600160801b03811681146134b457600080fd5b805162ffffff811681146134b457600080fd5b60006020828403121561350057600080fd5b8135610e4681613e39565b60006020828403121561351d57600080fd5b8151610e4681613e39565b6000806040838503121561353b57600080fd5b823561354681613e39565b9150602083013561355681613e39565b809150509250929050565b60008060006060848603121561357657600080fd5b833561358181613e39565b9250602084013561359181613e39565b929592945050506040919091013590565b600080604083850312156135b557600080fd5b82356135c081613e39565b946020939093013593505050565b6000806000606084860312156135e357600080fd5b83356135ee81613e39565b95602085013595506040909401359392505050565b6000806020838503121561361657600080fd5b823567ffffffffffffffff8082111561362e57600080fd5b818501915085601f83011261364257600080fd5b81358181111561365157600080fd5b8660208260051b850101111561366657600080fd5b60209290920196919550909350505050565b60006020828403121561368a57600080fd5b81518015158114610e4657600080fd5b600080600080608085870312156136b057600080fd5b84356136bb81613e4e565b935060208501356136cb81613e4e565b93969395505050506040820135916060013590565b6000602082840312156136f257600080fd5b815167ffffffffffffffff8082111561370a57600080fd5b818401915084601f83011261371e57600080fd5b81518181111561373057613730613e23565b604051601f8201601f19908116603f0116810190838211818310171561375857613758613e23565b8160405282815287602084870101111561377157600080fd5b6132e0836020830160208801613d5f565b600080828403606081121561379657600080fd5b60408112156137a457600080fd5b50829150604083013561355681613e39565b6000602082840312156137c857600080fd5b5051919050565b600080604083850312156137e257600080fd5b82359150602083013561355681613e39565b6000806000806080858703121561380a57600080fd5b8451935061381a602086016134c4565b6040860151606090960151949790965092505050565b6000806040838503121561384357600080fd5b505080516020909101519092909150565b6000806000806000806000806000806000806101808d8f03121561387757600080fd5b8c516bffffffffffffffffffffffff8116811461389357600080fd5b9b506138a160208e016134a9565b9a506138af60408e016134a9565b99506138bd60608e016134a9565b98506138cb60808e016134db565b97506138d960a08e016134b9565b96506138e760c08e016134b9565b95506138f560e08e016134c4565b94506101008d015193506101208d015192506139146101408e016134c4565b91506139236101608e016134c4565b90509295989b509295989b509295989b565b6000815180845261394d816020860160208601613d5f565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251613983818460208701613d5f565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156139e257603f198886030184526139d0858351613935565b945092850192908501906001016139b4565b5092979650505050505050565b6020810160028310613a1157634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000610e466020830184613935565b60208082526022908201527f526562616c616e6365723a204e6f7420696e207374616765204445504f534954604082015261115160f21b606082015260800190565b6020808252602f908201527f526562616c616e6365723a20456974686572206f6620746f6b656e20616d6f7560408201526e06e7473206d757374206265203e203608c1b606082015260800190565b60208082526018908201527f526562616c616e6365723a20496e76616c696420706169720000000000000000604082015260600190565b6020808252601e908201527f526562616c616e6365723a204f6e6c7920466163746f7279204f776e65720000604082015260600190565b6020808252818101527f526562616c616e6365723a204e6f7420696e20737461676520484f4c44494e47604082015260600190565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b81516001600160a01b0316815261016081016020830151613c1060208401826001600160a01b03169052565b506040830151613c27604084018262ffffff169052565b506060830151613c3c606084018260020b9052565b506080830151613c51608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151613c97828501826001600160a01b03169052565b505061014092830151919092015290565b6000808335601e19843603018112613cbf57600080fd5b83018035915067ffffffffffffffff821115613cda57600080fd5b60200191503681900382131561304057600080fd5b60008219821115613d0257613d02613de1565b500190565b600082613d2457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613d4357613d43613de1565b500290565b600082821015613d5a57613d5a613de1565b500390565b60005b83811015613d7a578181015183820152602001613d62565b838111156120ea5750506000910152565b600181811c90821680613d9f57607f821691505b60208210811415613dc057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613dda57613dda613de1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d7d57600080fd5b8060020b8114610d7d57600080fdfea2646970667358221220a392b31c510a9c87ada083b0ab0caf0359e01ca29448c77b7be2e898417ac4bb64736f6c63430008060033600180546001600160a01b031990811673c36442b4a4522e871399cd717abdd847ab11fe889081179092556002805482169092179091556003805490911673e592427a0aece92de3edee1f18e0157c05861564179055600061010081905261012081905260048190556005819055610140819052610160819052600681905560078190556101808190526101a08190526101c08190526101e08190526102008190526102208190526008819055600980546001600160801b0319169055600a819055600b819055600c805465ffffffffffff191690556102408190526102608190526102808190526103608181526103808290526102a0526103a08181526103c08290526102c0526102e08190526103008190526103e08181526104008290526103205261046060405261042081815261044082905261034052600d819055600e819055600f80546001600160401b0319169055601081905560118190556012819055601381905560148190556015805460ff191690556016819055601781905560188190556019553480156200019557600080fd5b506001600081905550600080336001600160a01b031663890357306040518163ffffffff1660e01b8152600401604080518083038186803b158015620001da57600080fd5b505afa158015620001ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002159190620003a0565b6001600160601b0319606083811b821660805282901b1660a05260408051630dfe168160e01b8152905192945090925082916001600160a01b03831691630dfe1681916004808301926020929190829003018186803b1580156200027857600080fd5b505afa1580156200028d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b391906200037b565b6001600160a01b031660c0816001600160a01b031660601b81525050806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200030957600080fd5b505afa1580156200031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034491906200037b565b60601b6001600160601b03191660e05250620003d8915050565b80516001600160a01b03811681146200037657600080fd5b919050565b6000602082840312156200038e57600080fd5b62000399826200035e565b9392505050565b60008060408385031215620003b457600080fd5b620003bf836200035e565b9150620003cf602084016200035e565b90509250929050565b60805160601c60a05160601c60c05160601c60e05160601c615980620005986000396000818161055e0152818161087101528181610a5301528181610eb9015281816115ac01528181611a9f01528181611bbd01528181611e940152818161207601528181612eb9015281816131ab015281816136df01528181613e9e015281816144fb015281816145990152818161461b01526146770152600081816101ce0152818161082001528181610a3201528181610e1301528181611567015281816119b201528181611b8201528181611e430152818161205501528181612dc3015281816130b60152818161360b01528181613e600152818161451c01528181614578015281816145fa01526146980152600081816102ae01528181613a7601528181613b1101528181613bba01528181613c5901528181613cf601528181613d9d01528181613f0001528181613f9f0152818161403e015261488f01526000818161050c0152818161063901528181610ad501528181610c85015281816120a5015281816121f401528181612c7801528181612d2a01528181612e200152818161300f015281816130fe01528181613570015261364101526159806000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063aa947930116100f9578063e2bbb15811610097578063f178ad7a11610071578063f178ad7a146105b4578063f2020275146105c7578063f6c4b6d5146105dc578063fced2e37146105ff57600080fd5b8063e2bbb15814610580578063e6fccf5d14610593578063e93573ac146105a157600080fd5b8063c45a0155116100d3578063c45a015514610507578063d0ecd0d21461052e578063d11711a214610551578063d21220a71461055957600080fd5b8063aa947930146104d9578063b0f285ee146104e1578063c31c9c07146104f457600080fd5b806357b47a1311610166578063791b98bc11610140578063791b98bc146104885780637a79cf471461049b5780638ab4c562146104a3578063a810a54c146104c657600080fd5b806357b47a1314610386578063597197fc1461038e5780635f8d96de1461048057600080fd5b80631ba326c4116101a25780631ba326c4146102d0578063350245c2146102f1578063412736571461035e57806356d6e7e51461037357600080fd5b80630dfe1681146101c95780630ecc535f1461020d57806316f0115b146102a9575b600080fd5b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61027061021b366004614d0a565b601c602090815260009182526040918290208251808401845281548152600182015481840152835180850190945260028201548452600382015492840192909252600481015460059091015491929160ff1684565b604080518551815260209586015186820152845191810191909152939092015160608401526080830152151560a082015260c001610204565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b6102e36102de366004614fe8565b610612565b604051908152602001610204565b600854600954600a54600b54600c5461032394936001600160801b0316929190600281810b9163010000009004900b86565b604080519687526001600160801b039095166020870152938501929092526060840152600290810b60808401520b60a082015260c001610204565b61037161036c366004614d0a565b610637565b005b610371610381366004614f34565b610723565b610371610a84565b600d54600e54600f5460408051808201825260105481526011546020808301919091528251808401845260125481526013548183015260145460155485518087018752601654815260175481860152865180880190975260185487526019549487019490945261040c98979660070b959293919260ff909116919089565b60408051998a526020808b019990995260079790970b9689019690965284516060890152938601516080880152825160a08801529185015160c087015260e086015215156101008501528051610120850152820151610140840152805161016084015201516101808201526101a001610204565b6102e3610c71565b6002546101f0906001600160a01b031681565b610371610c83565b6004546005546104b1919082565b60408051928352602083019190915201610204565b6103716104d4366004614d44565b61142b565b61037161161b565b6001546101f0906001600160a01b031681565b6003546101f0906001600160a01b031681565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b61054161053c366004614df9565b6117c4565b6040519015158152602001610204565b610371611812565b6101f07f000000000000000000000000000000000000000000000000000000000000000081565b61037161058e366004614fa2565b61191b565b6006546007546104b1919082565b6103716105af366004614de1565b611d3f565b6103716105c2366004614d0a565b6120a3565b6105cf612190565b60405161020491906152d5565b6105416105ea366004614d0a565b601b6020526000908152604090205460ff1681565b61037161060d366004614d9b565b6121f2565b6000811561062a57610625848484612478565b61062d565b60005b90505b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069057600080fd5b505afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190614d27565b6001600160a01b0316336001600160a01b0316146107015760405162461bcd60e51b81526004016106f890615408565b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546040516323b872dd60e01b81523360048201523060248201526044810183905282916001600160a01b0316906323b872dd90606401600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b505060025460405163133f757160e31b8152600481018690526000935083925082916001600160a01b0316906399fbab88906024016101806040518083038186803b1580156107d757600080fd5b505afa1580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f9190615014565b5050505097505050509450945050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461086f5760405162461bcd60e51b81526004016106f89061539a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316146108c05760405162461bcd60e51b81526004016106f89061539a565b60006040518060a00160405280878152602001836001600160801b0316815260200160008152602001600081526020016108f8610c71565b9052600254604051630624e65f60e11b81529192506001600160a01b031690630c49ccbe9061092b9084906004016154b9565b6040805180830381600087803b15801561094457600080fd5b505af1158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190614fc4565b5050604080516080810182528781523060208201526001600160801b038183018190526060820152600254915163fc6f786560e01b8152909160009182916001600160a01b03169063fc6f7865906109d8908690600401615476565b6040805180830381600087803b1580156109f157600080fd5b505af1158015610a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a299190614fc4565b91509150610a797f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084846125fd565b505050505050505050565b60026000541415610aa75760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b15610ad35760405162461bcd60e51b81526004016106f8906153d1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cec5926c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190614f4d565b600d54610b71904361581e565b1015610bcb5760405162461bcd60e51b815260206004820152602360248201527f526562616c616e6365723a2057616974206d6f726520746f2073746172742073604482015262756d6d60e81b60648201526084016106f8565b600f805460070b906000610bde83615861565b91906101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555050610c10612785565b610c186128b8565b610c20612c73565b600f5460408051338152600792830b90920b602083015243908201527f4addd45858f29e6ddfc82bd66f88b9742f5b63db507c925aef85298d9d90bb12906060015b60405180910390a16001600055565b6000610c7e42603c615712565b905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cdc57600080fd5b505afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190614d27565b6001600160a01b0316336001600160a01b031614610d445760405162461bcd60e51b81526004016106f890615408565b60026000541415610d675760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b15610d935760405162461bcd60e51b81526004016106f8906153d1565b600854600090610df15760405162461bcd60e51b815260206004820152602360248201527f526562616c616e6365723a20506f736974696f6e206d757374206265206f70656044820152621b995960ea1b60648201526084016106f8565b60408051808201918290526370a0823160e01b909152306044820152600090807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082316064830160206040518083038186803b158015610e5c57600080fd5b505afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190614f4d565b81526040516370a0823160e01b81523060048201526020909101906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f339190614f4d565b9052604080518082019091526004546006549293506000928291610f5691615712565b8152600554600754602090920191610f6e9190615712565b9052905060005b601a5481101561122257601c6000601a8381548110610f9657610f966158e9565b60009182526020808320909101546001600160a01b03168352820192909252604001812060020154601a80549192601c9290919085908110610fda57610fda6158e9565b60009182526020808320909101546001600160a01b031683528201929092526040019020546110099190615712565b82518390611018908390615712565b905250601a8054601c9160009184908110611035576110356158e9565b60009182526020808320909101546001600160a01b03168352820192909252604001812060030154601a80549192601c9290919085908110611079576110796158e9565b60009182526020808320909101546001600160a01b031683528201929092526040019020600101546110ab9190615712565b826020018181516110bc9190615712565b9150818152505061115e601c6000601a84815481106110dd576110dd6158e9565b60009182526020808320909101546001600160a01b031683528281019390935260409182019020815160c081018352815460808201908152600183015460a083015281528251808401845260028301548152600383015481860152938101939093526004810154918301919091526005015460ff16151560608201526117c4565b156111b5576000601b6000601a848154811061117c5761117c6158e9565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055611210565b836111bf81615888565b9450506001601b6000601a84815481106111db576111db6158e9565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790555b8061121a81615888565b915050610f75565b508151815114801561123b575081602001518160200151145b6112a65760405162461bcd60e51b815260206004820152603660248201527f526562616c616e6365723a20596f7520686176656e2774206163636f756e74656044820152756420736f6d652066756e6473206d6f76656d656e747360501b60648201526084016106f8565b6112b08183612f2f565b60008367ffffffffffffffff8111156112cb576112cb6158ff565b6040519080825280602002602001820160405280156112f4578160200160208202803683370190505b5090506000935060005b601a548110156113c757601b6000601a838154811061131f5761131f6158e9565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156113b557601a818154811061135f5761135f6158e9565b9060005260206000200160009054906101000a90046001600160a01b031682868151811061138f5761138f6158e9565b6001600160a01b0390921660209283029190910190910152846113b181615888565b9550505b806113bf81615888565b9150506112fe565b50601a5481516040517f319426fcc36bac971c8f20fb2514e8d07af7bd8bd6fbb3e46da19aea082567419261140492908252602082015260400190565b60405180910390a1805161141f90601a906020840190614bdc565b50506001600055505050565b6002600054141561144e5760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b1561147a5760405162461bcd60e51b81526004016106f8906153d1565b336000908152601b602052604090205460ff166114d95760405162461bcd60e51b815260206004820152601a60248201527f526562616c616e6365723a206e6f206465706f7369742079657400000000000060448201526064016106f8565b336000908152601c602090815260408083208151808301909252805482526001810180549383019390935283815592909155821561155057600282015481518290611525908390615712565b905250600382015460208201805161153e908390615712565b90525060006002830181905560038301555b80511561158f57805161158f906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033906131d6565b6020810151156115d45760208101516115d4906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033906131d6565b7fba88e9ce2c804abf9a0e0bdb79a9591c8bc6bac6657a64298030894d1b298408338483856040516116099493929190615210565b60405180910390a15050600160005550565b6002600054141561163e5760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b600114806116645750600f54600790810b900b6002145b6116b05760405162461bcd60e51b815260206004820152601960248201527f46697273742073746172742073756d6d6172697a6174696f6e0000000000000060448201526064016106f8565b7f0b5937e89d051e6853b4b5838d041b07e024515f143c8fa1ebdbe83a2bd4709c33600d436040516116e49392919061527c565b60405180910390a1600f54600790810b900b6001141561175057600061170861323e565b9050801561174e57600f805460070b90600061172383615861565b91906101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff160217905550505b505b600f54600790810b900b600214156117bd57600e5461177157611771613784565b600061177b61388c565b905080156117bb57600f805467ffffffffffffffff191690556000600e556006541515806117aa575060075415155b6117b55760006117b7565b435b600d555b505b6001600055565b6000816040015160001480156117dd5750602082015151155b80156117ee57506020808301510151155b80156117fd5750815160200151155b801561180c5750815160200151155b92915050565b600260005414156118355760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b156118615760405162461bcd60e51b81526004016106f8906153d1565b336000908152601b602052604090205460ff166118c05760405162461bcd60e51b815260206004820152601a60248201527f526562616c616e6365723a206e6f206465706f7369742079657400000000000060448201526064016106f8565b336000818152601c60205260409081902060058101805460ff19811660ff9182161590811790925592517f032152c99c859b5112b4db6e058e334ebb14473b8bd576ce5c9576d1b6c43f3c94610c6294909392169190615256565b6002600054141561193e5760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b1561196a5760405162461bcd60e51b81526004016106f8906153d1565b60008211806119795750600081115b6119955760405162461bcd60e51b81526004016106f890615357565b604051636eb1769f60e11b815233600482015230602482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e9060440160206040518083038186803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a349190614f4d565b1015611a825760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e3020616c6c6f77616e6365203c20746f6b656e30416d6f756e740060448201526064016106f8565b604051636eb1769f60e11b815233600482015230602482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015611ae957600080fd5b505afa158015611afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b219190614f4d565b1015611b6f5760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e3120616c6c6f77616e6365203c20746f6b656e31416d6f756e740060448201526064016106f8565b8115611baa57611baa6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856139f5565b8015611be557611be56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846139f5565b336000908152601c602052604081206002018054849290611c07908490615712565b9091555050336000908152601c602052604081206003018054839290611c2e908490615712565b9091555050336000818152601c60205260409081902060058101805460ff1916600117905590517fdb84b625dfc2983618d9c2195bf34793969c4d226e7a1f66b60010ea0e127fad92611c86929091869186916152a9565b60405180910390a1336000908152601b602052604090205460ff16611d3657336000818152601b60209081526040808320805460ff19166001908117909155601a805491820181559093527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e90920180546001600160a01b0319168417905590519182527f0b0376a109cbb578b709f85f6a7befcdac3ac1ab251c99ede87f30c9572ac4d3910160405180910390a15b50506001600055565b6000611d4e6020830183614d0a565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbe9190614d27565b90506000611dcf6020840184614d0a565b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0757600080fd5b505afa158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190614d27565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614611e925760405162461bcd60e51b81526004016106f89061539a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614611ee35760405162461bcd60e51b81526004016106f89061539a565b611ef06020840184614d0a565b6001600160a01b03166323b872dd33611f0c6020870187614d0a565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260208601356044820152606401602060405180830381600087803b158015611f5e57600080fd5b505af1158015611f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f969190614d61565b50600080611fa76020860186614d0a565b60405163226bf2d160e21b81523060048201526001600160a01b0391909116906389afcb44906024016040805180830381600087803b158015611fe957600080fd5b505af1158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120219190614fc4565b9150915060008211806120345750600081115b6120505760405162461bcd60e51b81526004016106f890615357565b61209c7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084846125fd565b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120fc57600080fd5b505afa158015612110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121349190614d27565b6001600160a01b0316336001600160a01b0316146121645760405162461bcd60e51b81526004016106f890615408565b600180546001600160a01b039092166001600160a01b0319928316811790915560028054909216179055565b6060601a8054806020026020016040519081016040528092919081815260200182805480156121e857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121ca575b5050505050905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561224b57600080fd5b505afa15801561225f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122839190614d27565b6001600160a01b0316336001600160a01b0316146122b35760405162461bcd60e51b81526004016106f890615408565b600260005414156122d65760405162461bcd60e51b81526004016106f89061543f565b6002600055600f54600790810b900b156123025760405162461bcd60e51b81526004016106f8906153d1565b6123386040518060400160405280600f81526020016e0696e5374616b652e616d6f756e743608c1b815250600660000154613a2d565b61236e6040518060400160405280600f81526020016e696e5374616b652e616d6f756e743160881b815250600660010154613a2d565b60065415158061237f575060075415155b6123cb5760405162461bcd60e51b815260206004820152601a60248201527f526562616c616e6365723a205374616b6520697320656d70747900000000000060448201526064016106f8565b6008546123e3576123de84848484613a72565b6123ff565b6123eb612785565b6123f36128b8565b6123ff84848484613a72565b60408051600286810b825285900b602082015290810183905260608101829052600654608082015260075460a082015260045460c082015260055460e08201527fe0f908dc9a3a317bedaca94bd5f545ed86c38d61097483f7b53d4a159a43eb43906101000160405180910390a1505060016000555050565b6000808060001985870985870292508281108382030391505080600014156124b257600084116124a757600080fd5b508290049050610630565b8084116124be57600080fd5b6000848688098084039381119092039190506000856124df8160001961581e565b6124ea906001615712565b1695869004959384900493600081900304600101905061250a81846157b7565b90931792600061251b8760036157b7565b600218905061252a81886157b7565b61253590600261581e565b61253f90826157b7565b905061254b81886157b7565b61255690600261581e565b61256090826157b7565b905061256c81886157b7565b61257790600261581e565b61258190826157b7565b905061258d81886157b7565b61259890600261581e565b6125a290826157b7565b90506125ae81886157b7565b6125b990600261581e565b6125c390826157b7565b90506125cf81886157b7565b6125da90600261581e565b6125e490826157b7565b90506125f081866157b7565b9998505050505050505050565b6002546126159085906001600160a01b03168461429c565b60025461262d9084906001600160a01b03168361429c565b336000908152601c60205260408120600201805484929061264f908490615712565b9091555050336000908152601c602052604081206003018054839290612676908490615712565b9091555050336000818152601c60205260409081902060058101805460ff1916600117905590517fdb84b625dfc2983618d9c2195bf34793969c4d226e7a1f66b60010ea0e127fad926126ce929091869186916152a9565b60405180910390a1336000908152601b602052604090205460ff1661277f57336000818152601b60209081526040808320805460ff19166001908117909155601a805491820181559093527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e90920180546001600160a01b0319168417905590519182527f0b0376a109cbb578b709f85f6a7befcdac3ac1ab251c99ede87f30c9572ac4d391015b60405180910390a15b50505050565b600854156128b6576002546040805160808101825260085481523060208201526001600160801b0381830181905260608201819052915163fc6f786560e01b8152919260009283926001600160a01b039092169163fc6f7865916127ec9190600401615476565b6040805180830381600087803b15801561280557600080fd5b505af1158015612819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283d9190614fc4565b9150915081600460000160008282546128569190615712565b909155505060058054829190600090612870908490615712565b90915550506040517fc44ad483084548c44608c0ff312a51e0ef32847bbee51d3866259cf7ac74664a906128aa908490849060049061567c565b60405180910390a15050505b565b600854156128b65760015460025460085460405163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291169063095ea7b390604401600060405180830381600087803b15801561291457600080fd5b505af1158015612928573d6000803e3d6000fd5b50506002546040805160a08101825260085481526009546001600160801b031660208201526000918101829052606081018290529093508392506001600160a01b0390911690630c49ccbe9060808101612980610c71565b8152506040518263ffffffff1660e01b815260040161299f91906154b9565b6040805180830381600087803b1580156129b857600080fd5b505af11580156129cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f09190614fc4565b6002546040805160808101825260085481523060208201526001600160801b0381830181905260608201819052915163fc6f786560e01b81529496509294509260009283926001600160a01b03169163fc6f786591612a5191600401615476565b6040805180830381600087803b158015612a6a57600080fd5b505af1158015612a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa29190614fc4565b909250905081612ab2868261581e565b612abc9190615712565b60068054600090612ace908490615712565b90915550819050612adf858261581e565b612ae99190615712565b60078054600090612afb908490615712565b909155505060015460025460085460405163095ea7b360e01b81526001600160a01b039283166004820152602481019190915291169063095ea7b390604401600060405180830381600087803b158015612b5457600080fd5b505af1158015612b68573d6000803e3d6000fd5b5050600254600854604051630852cd8d60e31b81526001600160a01b0390921693506342966c689250612ba19160040190815260200190565b600060405180830381600087803b158015612bbb57600080fd5b505af1158015612bcf573d6000803e3d6000fd5b50506040805160c081018252600080825260208201819052818301819052606082018190526080820181905260a09091018190526008819055600980546001600160801b0319169055600a819055600b55600c805465ffffffffffff19169055517fbfa211530298cfd52f02788104797e992eae978eef411e162b4b4440b063d4b79250612c6491508790879060069061567c565b60405180910390a15050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d19d40bd6040518163ffffffff1660e01b8152600401604080518083038186803b158015612cce57600080fd5b505afa158015612ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d069190614fc4565b91509150600080612d1d6004600001548585610612565b91508115612e0557612dea7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d8157600080fd5b505afa158015612d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db99190614d27565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690846131d6565b8160046000016000828254612dff919061581e565b90915550505b600554612e13908585610612565b90508015612efb57612ee07f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e7757600080fd5b505afa158015612e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eaf9190614d27565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690836131d6565b8060046001016000828254612ef5919061581e565b90915550505b7fad6e518d74fe75cd951948faa82d2f07ea74f091d6e66c1d7eaf1d609f9f6ca8828260046040516127769392919061567c565b8151815110801590612f4957508160200151816020015110155b612fbb5760405162461bcd60e51b815260206004820152603960248201527f526562616c616e6365723a20596f75206d757374206e65766572206f7765206d60448201527f6f726520746f6b656e732c207468616e20796f7520686176650000000000000060648201526084016106f8565b7fe6c65e4a138c359ec397e29d8b8d5362a87dc44d7f16bb0f446936a1fc45ddb88183604051612fec929190615630565b60405180910390a1815181516000916130049161581e565b11156130dd576130dd7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561306657600080fd5b505afa15801561307a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309e9190614d27565b835183516130ac919061581e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906131d6565b6000826020015182602001516130f3919061581e565b11156131d2576131d27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561315557600080fd5b505afa158015613169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318d9190614d27565b836020015183602001516131a1919061581e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906131d6565b5050565b6040516001600160a01b03831660248201526044810182905261323990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143c4565b505050565b600e54600090815a905060005b601a548310156134bf57805a1015613268575050600e5550600090565b6000601c6000601a8681548110613281576132816158e9565b60009182526020808320909101546001600160a01b0316835282810193909352604091820181208251808401845282815280850183905283518085019094528284529383019190915260048054908201546014549295506132e192610612565b825183906132f0908390615712565b9052506005546004840154601454613309929190610612565b8260200181815161331a9190615712565b9052506006546004840154601454613333929190610612565b81518290613342908390615712565b905250600754600484015460145461335b929190610612565b8160200181815161336c9190615712565b905250815183548490600090613383908490615712565b909155505060208201516001840180546000906133a1908490615712565b909155505080516002840180546000906133bc908490615712565b909155505060208101516003840180546000906133da908490615712565b90915550508151601680546000906133f3908490615712565b909155505060208201516017805460009061340f908490615712565b9091555050805160188054600090613428908490615712565b9091555050602081015160198054600090613444908490615712565b909155505060006004840155600583015460ff161561349657600283015460128054600090613474908490615712565b9091555050600383015460138054600090613490908490615712565b90915550505b836134a9575a6134a6908661581e565b93505b50505082806134b790615888565b93505061324b565b601654600480546000906134d490849061581e565b9091555050601754600580546000906134ee90849061581e565b90915550506018546006805460009061350890849061581e565b90915550506019546007805460009061352290849061581e565b9091555050604080518082019091526006546004546000929182916135479190615712565b815260075460055460209092019161355f9190615712565b9052805190915015613632576136327f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135c757600080fd5b505afa1580156135db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ff9190614d27565b82516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906131d6565b602081015115613706576137067f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561369857600080fd5b505afa1580156136ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d09190614d27565b60208301516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906131d6565b60006004819055600581905560128054600690815560138054600755918390559190556040517f0b4d51621758ce7c6ac9df32916c8a483d337cb8eb22b81c2d8f43362266877c9161375d91859190600d90615656565b60405180910390a15050600060168190556017819055601881905560195550600192915050565b600654600754808211156137f5576015805460ff19166001179055600654156137b3576137b360006064614496565b81156137f0576040518060400160405280826006600101546137d5919061581e565b81526020908101849052815160105501516011556007546014555b613850565b6015805460ff19169055600754156138135761381360646000614496565b801561385057604051806040016040528083600660000154613835919061581e565b81526020908101839052815160105501516011556006546014555b7f536fe74e35f7b5d2d1d902051a047c4553c0175367694e4278359c901c4ee64a600d6040516138809190615621565b60405180910390a15050565b600e54600090815a905060005b601a548310156139ae57805a10156138b6575050600e5550600090565b6000601c6000601a86815481106138cf576138cf6158e9565b60009182526020808320909101546001600160a01b031683528201929092526040019020600581015490915060ff16156139885760155460009060ff1661392b576003820154601054601154613926929190610612565b613941565b6002820154601054601154613941929190610612565b60155490915060ff1661396357600282015461395e908290615712565b613973565b6003820154613973908290615712565b60048301555060006002820181905560038201555b8161399b575a613998908461581e565b91505b50826139a681615888565b935050613899565b7f1296f68b35e8f852c6ee5a3815b1e52b82606f025eec13363baff853db24856c816006600d6040516139e393929190615656565b60405180910390a16001935050505090565b6040516001600160a01b038085166024830152831660448201526064810182905261277f9085906323b872dd60e01b90608401613202565b6131d28282604051602401613a43929190615335565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614725565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015613acd57600080fd5b505afa158015613ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b059190614e81565b505050505091505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b6857600080fd5b505afa158015613b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba09190614d7e565b613baa90836158a3565b613bb490836157d6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c1157600080fd5b505afa158015613c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c499190614d7e565b613c5390836157d6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cb057600080fd5b505afa158015613cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce89190614d7e565b613cf290846156cb565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d4d57600080fd5b505afa158015613d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d859190614d7e565b613d8f908961572a565b613d9990836157d6565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613df457600080fd5b505afa158015613e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2c9190614d7e565b613e36908861572a565b613e4090826156cb565b9050613e4c8686614496565b600254600654613e8a916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690614746565b600254600754613ec8916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690614746565b600080600080600260009054906101000a90046001600160a01b03166001600160a01b031663883164566040518061016001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613f5757600080fd5b505afa158015613f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8f9190614d27565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613ff657600080fd5b505afa15801561400a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402e9190614d27565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561409557600080fd5b505afa1580156140a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140cd9190614f19565b62ffffff16815260028a810b602083015289900b604082015260065460608201526007546080820152600060a0820181905260c08201523060e082015261010001614116610c71565b8152506040518263ffffffff1660e01b815260040161413591906154fc565b608060405180830381600087803b15801561414f57600080fd5b505af1158015614163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141879190614f66565b935093509350935081600660000160008282546141a4919061581e565b9091555050600780548291906000906141be90849061581e565b90915550506040805160c0810182528581526001600160801b0385166020820181905281830185905260608201849052600289810b6080840181905289820b60a09094018490526008898155600980546001600160801b031916909417909355600a879055600b869055600c805494830b62ffffff90811663010000000265ffffffffffff199096169290930b909216179290921790915590517ff8c87fb00457cf273795639910be5d19ab26a00c491b3a5f1e9bfa2e93ceb5f591614286916006906155c0565b60405180910390a1505050505050505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916142f891906151f4565b6000604051808303816000865af19150503d8060008114614335576040519150601f19603f3d011682016040523d82523d6000602084013e61433a565b606091505b50915091508180156143645750805115806143645750808060200190518101906143649190614d61565b61209c5760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201526a1c9bdd994819985a5b195960aa1b60648201526084016106f8565b6000614419826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148079092919063ffffffff16565b80519091501561323957808060200190518101906144379190614d61565b6132395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106f8565b6144a08183615712565b6064146144e75760405162461bcd60e51b81526020600482015260156024820152740746f6b656e53686172652073756d20213d2031303605c1b60448201526064016106f8565b60075460065460009110156145f5576145467f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600660010154614816565b60068054600090614558908490615712565b9091555050600060075560065461457190836064610612565b90506145be7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083614816565b600780546000906145d0908490615712565b9091555050600680548291906000906145ea90849061581e565b909155506146ef9050565b6146457f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600660000154614816565b60078054600090614657908490615712565b9091555050600060065560075461467090846064610612565b90506146bd7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083614816565b600680546000906146cf908490615712565b9091555050600780548291906000906146e990849061581e565b90915550505b7f47161b4468e4b496875ef9210a96a0d96de7a4d729ce4e60cbfbf4bc139322c183838360066040516128aa94939291906156a0565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561479257600080fd5b505afa1580156147a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147ca9190614f4d565b6147d49190615712565b6040516001600160a01b03851660248201526044810182905290915061277f90859063095ea7b360e01b90606401613202565b606061062d8484600085614a79565b60008161482557506000610630565b60035461483f906001600160a01b03868116911684614746565b600360009054906101000a90046001600160a01b03166001600160a01b031663414bf389604051806101000160405280876001600160a01b03168152602001866001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156148e657600080fd5b505afa1580156148fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061491e9190614f19565b62ffffff168152306020820152604001614936610c71565b8152602080820187905260006040808401829052606093840191909152805160e086811b6001600160e01b031916825285516001600160a01b03908116600484015293860151841660248301529185015162ffffff16604482015292840151821660648401526080840151608484015260a084015160a484015260c084015160c4840152929092015190911660e482015261010401602060405180830381600087803b1580156149e557600080fd5b505af11580156149f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a1d9190614f4d565b604080516001600160a01b03808816825286166020820152908101849052606081018290529091507f25f1d03755df23c30e25db2dbd3891e31ce084bdfbfc46f9fe5e446ee5f9b2d49060800160405180910390a19392505050565b606082471015614ada5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106f8565b843b614b285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f8565b600080866001600160a01b03168587604051614b4491906151f4565b60006040518083038185875af1925050503d8060008114614b81576040519150601f19603f3d011682016040523d82523d6000602084013e614b86565b606091505b5091509150614b96828286614ba3565b925050505b949350505050565b60608315614bb2575081610630565b825115614bc25782518084602001fd5b8160405162461bcd60e51b81526004016106f89190615322565b828054828255906000526020600020908101928215614c31579160200282015b82811115614c3157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614bfc565b50614c3d929150614c41565b5090565b5b80821115614c3d5760008155600101614c42565b8051614c6181615915565b919050565b8051614c618161593b565b600060408284031215614c8357600080fd5b6040516040810181811067ffffffffffffffff82111715614cb457634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b80516001600160801b0381168114614c6157600080fd5b805161ffff81168114614c6157600080fd5b805162ffffff81168114614c6157600080fd5b600060208284031215614d1c57600080fd5b813561063081615915565b600060208284031215614d3957600080fd5b815161063081615915565b600060208284031215614d5657600080fd5b81356106308161592d565b600060208284031215614d7357600080fd5b81516106308161592d565b600060208284031215614d9057600080fd5b81516106308161593b565b60008060008060808587031215614db157600080fd5b8435614dbc8161593b565b93506020850135614dcc8161593b565b93969395505050506040820135916060013590565b600060408284031215614df357600080fd5b50919050565b600060c08284031215614e0b57600080fd5b6040516080810181811067ffffffffffffffff82111715614e3c57634e487b7160e01b600052604160045260246000fd5b604052614e498484614c71565b8152614e588460408501614c71565b60208201526080830135604082015260a0830135614e758161592d565b60608201529392505050565b600080600080600080600060e0888a031215614e9c57600080fd5b8751614ea781615915565b6020890151909750614eb88161593b565b9550614ec660408901614ce5565b9450614ed460608901614ce5565b9350614ee260808901614ce5565b925060a088015160ff81168114614ef857600080fd5b60c0890151909250614f098161592d565b8091505092959891949750929550565b600060208284031215614f2b57600080fd5b61063082614cf7565b600060208284031215614f4657600080fd5b5035919050565b600060208284031215614f5f57600080fd5b5051919050565b60008060008060808587031215614f7c57600080fd5b84519350614f8c60208601614cce565b6040860151606090960151949790965092505050565b60008060408385031215614fb557600080fd5b50508035926020909101359150565b60008060408385031215614fd757600080fd5b505080516020909101519092909150565b600080600060608486031215614ffd57600080fd5b505081359360208301359350604090920135919050565b6000806000806000806000806000806000806101808d8f03121561503757600080fd5b8c516bffffffffffffffffffffffff8116811461505357600080fd5b9b5061506160208e01614c56565b9a5061506f60408e01614c56565b995061507d60608e01614c56565b985061508b60808e01614cf7565b975061509960a08e01614c66565b96506150a760c08e01614c66565b95506150b560e08e01614cce565b94506101008d015193506101208d015192506150d46101408e01614cce565b91506150e36101608e01614cce565b90509295989b509295989b509295989b565b6000815180845261510d816020860160208601615835565b601f01601f19169290920160200192915050565b8054825260018101546020830152600281015460070b615146604084018260070b9052565b506003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e0830152600881015460ff1615156101008301526009810154610120830152600a810154610140830152600b810154610160830152600c015461018090910152565b80548252600181015460208301526002810154604083015260038101546060830152600481015460808301526005015460ff16151560a090910152565b60008251615206818460208701615835565b9190910192915050565b6001600160a01b038516815283151560208201526101408101615240604083018580518252602090810151910152565b61524d60808301846151b7565b95945050505050565b6001600160a01b038416815282151560208201526101008101614b9b60408301846151b7565b6001600160a01b03841681526101e0810161529a6020830185615121565b826101c0830152949350505050565b6001600160a01b03851681526020810184905260408101839052610120810161524d60608301846151b7565b6020808252825182820181905260009190848201906040850190845b818110156153165783516001600160a01b0316835292840192918401916001016152f1565b50909695505050505050565b60208152600061063060208301846150f5565b60408152600061534860408301856150f5565b90508260208301529392505050565b60208082526023908201527f456974686572206f6620746f6b656e20616d6f756e7473206d7573742062652060408201526203e20360ec1b606082015260800190565b60208082526018908201527f526562616c616e6365723a20496e76616c696420706169720000000000000000604082015260600190565b6020808252601a908201527f526562616c616e6365723a204e6f7420696e2073746167652030000000000000604082015260600190565b6020808252601e908201527f526562616c616e6365723a204f6e6c7920466163746f7279204f776e65720000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b81516001600160a01b031681526101608101602083015161552860208401826001600160a01b03169052565b50604083015161553f604084018262ffffff169052565b506060830151615554606084018260020b9052565b506080830151615569608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516155af828501826001600160a01b03169052565b505061014092830151919092015290565b825481526001808401546001600160801b03166020830152600280850154604084015260038501546060840152600485015480820b820b608085015260181c810b900b60a0830152825460c083015282015460e08201526101008101610630565b6101a0810161180c8284615121565b825181526020808401518183015282516040830152820151606082015260808101610630565b83815282546020820152600183015460408201526102008101614b9b6060830184615121565b83815260208101839052815460408201526001820154606082015260808101614b9b565b8481526020810184905260408101839052815460608201526001820154608082015260a0810161524d565b60008160020b8360020b6000821282627fffff038213811516156156f1576156f16158d3565b82627fffff19038212811615615709576157096158d3565b50019392505050565b60008219821115615725576157256158d3565b500190565b60008160020b8360020b627fffff600082136000841383830485118282161615615756576157566158d3565b627fffff196000851282811687830587121615615775576157756158d3565b60008712925085820587128484161615615791576157916158d3565b858505871281841616156157a7576157a76158d3565b5050509290910295945050505050565b60008160001904831182151516156157d1576157d16158d3565b500290565b60008160020b8360020b6000811281627fffff19018312811516156157fd576157fd6158d3565b81627fffff018313811615615814576158146158d3565b5090039392505050565b600082821015615830576158306158d3565b500390565b60005b83811015615850578181015183820152602001615838565b8381111561277f5750506000910152565b60008160070b677fffffffffffffff81141561587f5761587f6158d3565b60010192915050565b600060001982141561589c5761589c6158d3565b5060010190565b60008260020b806158c457634e487b7160e01b600052601260045260246000fd5b808360020b0791505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461592a57600080fd5b50565b801515811461592a57600080fd5b8060020b811461592a57600080fdfea26469706673582212204db436ca5a294928b803708121d36743e273d911e4d708e9c226093a7280f56b64736f6c63430008060033a2646970667358221220bec79ed8841c076a51f6dda3731c0b8c193cb151e0c2ca7fe3b3afe085c4b1f264736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10972,
        "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
        "label": "parameters",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Parameters)10968_storage"
      },
      {
        "astId": 11083,
        "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
        "label": "uniswapV3Factory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV3Factory)4311"
      },
      {
        "astId": 11091,
        "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
        "label": "rebalancerFee",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(RebalancerFee)13416_storage"
      },
      {
        "astId": 11096,
        "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
        "label": "getRebalancer",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11100,
        "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
        "label": "getRebalancerV2",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11103,
        "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
        "label": "quoter",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 11107,
        "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
        "label": "summarizationFrequency",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11110,
        "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
        "label": "owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Factory)4311": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Factory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Parameters)10968_storage": {
        "encoding": "inplace",
        "label": "struct RebalancerDeployer.Parameters",
        "members": [
          {
            "astId": 10965,
            "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
            "label": "factory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10967,
            "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
            "label": "pool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RebalancerFee)13416_storage": {
        "encoding": "inplace",
        "label": "struct IRebalancerFactory.RebalancerFee",
        "members": [
          {
            "astId": 13413,
            "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
            "label": "numerator",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13415,
            "contract": "contracts/rebalance/RebalancerFactory.sol:RebalancerFactory",
            "label": "denominator",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}